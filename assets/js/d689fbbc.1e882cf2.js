"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[997],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={title:"Dependencies and groups"},o=void 0,l={unversionedId:"implementations/deps",id:"implementations/deps",title:"Dependencies and groups",description:"Dependencies are objects like (ID, resolved) where resolved is a boolean field",source:"@site/docs/implementations/deps.md",sourceDirName:"implementations",slug:"/implementations/deps",permalink:"/kantoku/docs/implementations/deps",draft:!1,tags:[],version:"current",frontMatter:{title:"Dependencies and groups"},sidebar:"tutorialSidebar",previous:{title:"Implementations",permalink:"/kantoku/docs/implementations/"},next:{title:"Future",permalink:"/kantoku/docs/pipelines/future"}},p={},s=[],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Dependencies are objects like ",(0,i.kt)("inlineCode",{parentName:"p"},"(ID, resolved)")," where resolved is a boolean field"),(0,i.kt)("p",null,"Groups (think dependency groups) are objects like ",(0,i.kt)("inlineCode",{parentName:"p"},"(ID, pending, status)")," where pending is a counter of unresolved dependencies, status is one of"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initializing")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"waiting")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scheduling")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scheduled"))),(0,i.kt)("p",null,"There is a mapping ",(0,i.kt)("inlineCode",{parentName:"p"},"dependency.ID \u21d4 group.ID"),", so dependency can be a member of multiple groups, and a group can have multiple members (but they are unique)."),(0,i.kt)("p",null,"Life-cycle of a dependency:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Make() \u2192 ID")," of dep; it is not saved"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Resolve(ID)")," create resolved dep with ID, if it doesn\u2019t exist, otherwise ensure it is resolved. Decrement counter of the linked groups")),(0,i.kt)("p",null,"It is more complicated for a group:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"MakeGroup(IDs\u2026)")," makes a transaction that creates a group ",(0,i.kt)("inlineCode",{parentName:"li"},"(ID, -1, _initializing_)"),", and maps all IDs of deps to group ID"),(0,i.kt)("li",{parentName:"ol"},"There is a process that initializes groups once in the determined interval: selects all groups with ",(0,i.kt)("inlineCode",{parentName:"li"},"initializing")," status, changes it to ",(0,i.kt)("inlineCode",{parentName:"li"},"waiting"),", and sets the counter to the count of linked dependencies."),(0,i.kt)("li",{parentName:"ol"},"There is a similar process that searches for groups with a counter equal to zero and resolves them. When a group is taken to be resolved status is updated to ",(0,i.kt)("inlineCode",{parentName:"li"},"scheduling"),", and when it is done to ",(0,i.kt)("inlineCode",{parentName:"li"},"scheduled"),".")))}d.isMDXComponent=!0}}]);