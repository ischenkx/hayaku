/* tslint:disable */
/* eslint-disable */
/**
 * Kantoku API
 * Create and execute distributed workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InfoCursor
 */
export interface InfoCursor {
    /**
     * 
     * @type {number}
     * @memberof InfoCursor
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof InfoCursor
     */
    'limit'?: number;
    /**
     * 
     * @type {Array<RecordMask>}
     * @memberof InfoCursor
     */
    'masks'?: Array<RecordMask>;
    /**
     * 
     * @type {Array<RecordSorter>}
     * @memberof InfoCursor
     */
    'sort'?: Array<RecordSorter>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InfoCursor
     */
    'distinct'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A human readable error message
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface RecordMask
 */
export interface RecordMask {
    /**
     * 
     * @type {string}
     * @memberof RecordMask
     */
    'operation': string;
    /**
     * 
     * @type {string}
     * @memberof RecordMask
     */
    'property_pattern': string;
}
/**
 * 
 * @export
 * @interface RecordSorter
 */
export interface RecordSorter {
    /**
     * 
     * @type {string}
     * @memberof RecordSorter
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof RecordSorter
     */
    'ordering': string;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface ResourceInitializer
 */
export interface ResourceInitializer {
    /**
     * 
     * @type {string}
     * @memberof ResourceInitializer
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ResourceInitializer
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface Specification
 */
export interface Specification {
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'id': string;
    /**
     * 
     * @type {SpecificationIO}
     * @memberof Specification
     */
    'io': SpecificationIO;
    /**
     * 
     * @type {SpecificationExecutable}
     * @memberof Specification
     */
    'executable': SpecificationExecutable;
    /**
     * 
     * @type {object}
     * @memberof Specification
     */
    'meta': object;
}
/**
 * 
 * @export
 * @interface SpecificationExecutable
 */
export interface SpecificationExecutable {
    /**
     * 
     * @type {string}
     * @memberof SpecificationExecutable
     */
    'type': string;
    /**
     * 
     * @type {object}
     * @memberof SpecificationExecutable
     */
    'data': object;
}
/**
 * 
 * @export
 * @interface SpecificationIO
 */
export interface SpecificationIO {
    /**
     * 
     * @type {SpecificationResourceSet}
     * @memberof SpecificationIO
     */
    'inputs': SpecificationResourceSet;
    /**
     * 
     * @type {SpecificationResourceSet}
     * @memberof SpecificationIO
     */
    'outputs': SpecificationResourceSet;
}
/**
 * 
 * @export
 * @interface SpecificationResourceSet
 */
export interface SpecificationResourceSet {
    /**
     * 
     * @type {Array<SpecificationResourceSetNamingInner>}
     * @memberof SpecificationResourceSet
     */
    'naming': Array<SpecificationResourceSetNamingInner>;
    /**
     * 
     * @type {Array<SpecificationResourceSetTypesInner>}
     * @memberof SpecificationResourceSet
     */
    'types': Array<SpecificationResourceSetTypesInner>;
}
/**
 * 
 * @export
 * @interface SpecificationResourceSetNamingInner
 */
export interface SpecificationResourceSetNamingInner {
    /**
     * 
     * @type {number}
     * @memberof SpecificationResourceSetNamingInner
     */
    'index': number;
    /**
     * 
     * @type {string}
     * @memberof SpecificationResourceSetNamingInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface SpecificationResourceSetTypesInner
 */
export interface SpecificationResourceSetTypesInner {
    /**
     * 
     * @type {number}
     * @memberof SpecificationResourceSetTypesInner
     */
    'index': number;
    /**
     * 
     * @type {Type}
     * @memberof SpecificationResourceSetTypesInner
     */
    'type': Type;
}
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {Array<string>}
     * @memberof Task
     */
    'inputs': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Task
     */
    'outputs': Array<string>;
    /**
     * 
     * @type {object}
     * @memberof Task
     */
    'info': object;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TaskSpawnResponse
 */
export interface TaskSpawnResponse {
    /**
     * 
     * @type {string}
     * @memberof TaskSpawnResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TaskSpecification
 */
export interface TaskSpecification {
    /**
     * 
     * @type {Array<string>}
     * @memberof TaskSpecification
     */
    'inputs': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TaskSpecification
     */
    'outputs': Array<string>;
    /**
     * 
     * @type {object}
     * @memberof TaskSpecification
     */
    'info': object;
}
/**
 * 
 * @export
 * @interface TasksFilterPostRequest
 */
export interface TasksFilterPostRequest {
    /**
     * 
     * @type {object}
     * @memberof TasksFilterPostRequest
     */
    'filter'?: object;
    /**
     * 
     * @type {InfoCursor}
     * @memberof TasksFilterPostRequest
     */
    'cursor'?: InfoCursor;
}
/**
 * 
 * @export
 * @interface TasksSpecificationsGetPostRequest
 */
export interface TasksSpecificationsGetPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TasksSpecificationsGetPostRequest
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TasksUpdatePostRequest
 */
export interface TasksUpdatePostRequest {
    /**
     * 
     * @type {object}
     * @memberof TasksUpdatePostRequest
     */
    'filter': object;
    /**
     * 
     * @type {object}
     * @memberof TasksUpdatePostRequest
     */
    'update': object;
    /**
     * 
     * @type {object}
     * @memberof TasksUpdatePostRequest
     */
    'upsert'?: object;
}
/**
 * 
 * @export
 * @interface Type
 */
export interface Type {
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    'name': string;
    /**
     * 
     * @type {TypeSubTypes}
     * @memberof Type
     */
    'sub_types': TypeSubTypes;
}
/**
 * 
 * @export
 * @interface TypeSubTypes
 */
export interface TypeSubTypes {
    [key: string]: Type | any;

    /**
     * 
     * @type {Type}
     * @memberof TypeSubTypes
     */
    'default'?: Type;
}
/**
 * 
 * @export
 * @interface TypeWithID
 */
export interface TypeWithID {
    /**
     * 
     * @type {string}
     * @memberof TypeWithID
     */
    'id': string;
    /**
     * 
     * @type {Type}
     * @memberof TypeWithID
     */
    'type': Type;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Allocates N resources
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesAllocatePost: async (amount: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('resourcesAllocatePost', 'amount', amount)
            const localVarPath = `/resources/allocate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deallocate resources
         * @param {Array<string>} requestBody A list of resource identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesDeallocatePost: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('resourcesDeallocatePost', 'requestBody', requestBody)
            const localVarPath = `/resources/deallocate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initialize resources
         * @param {Array<ResourceInitializer>} resourceInitializer A dictionary (ResourceID -&gt; Value)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesInitializePost: async (resourceInitializer: Array<ResourceInitializer>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceInitializer' is not null or undefined
            assertParamExists('resourcesInitializePost', 'resourceInitializer', resourceInitializer)
            const localVarPath = `/resources/initialize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceInitializer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load resources
         * @param {Array<string>} requestBody A list of resource identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesLoadPost: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('resourcesLoadPost', 'requestBody', requestBody)
            const localVarPath = `/resources/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Count records using a filter
         * @param {TasksFilterPostRequest} tasksFilterPostRequest A query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksCountPost: async (tasksFilterPostRequest: TasksFilterPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tasksFilterPostRequest' is not null or undefined
            assertParamExists('tasksCountPost', 'tasksFilterPostRequest', tasksFilterPostRequest)
            const localVarPath = `/tasks/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tasksFilterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load records using a filter
         * @param {TasksFilterPostRequest} tasksFilterPostRequest A query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksFilterPost: async (tasksFilterPostRequest: TasksFilterPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tasksFilterPostRequest' is not null or undefined
            assertParamExists('tasksFilterPost', 'tasksFilterPostRequest', tasksFilterPostRequest)
            const localVarPath = `/tasks/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tasksFilterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load a set of tasks
         * @param {Array<string>} requestBody A list of task identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksLoadPost: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('tasksLoadPost', 'requestBody', requestBody)
            const localVarPath = `/tasks/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Spawn a new task
         * @param {TaskSpecification} taskSpecification The specification of a task to be spawned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpawnPost: async (taskSpecification: TaskSpecification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskSpecification' is not null or undefined
            assertParamExists('tasksSpawnPost', 'taskSpecification', taskSpecification)
            const localVarPath = `/tasks/spawn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskSpecification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a specification
         * @param {Specification} specification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsCreatePost: async (specification: Specification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'specification' is not null or undefined
            assertParamExists('tasksSpecificationsCreatePost', 'specification', specification)
            const localVarPath = `/tasks/specifications/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all specifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsGetAllPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks/specifications/get_all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get specifications by id
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsGetPost: async (tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tasksSpecificationsGetPostRequest' is not null or undefined
            assertParamExists('tasksSpecificationsGetPost', 'tasksSpecificationsGetPostRequest', tasksSpecificationsGetPostRequest)
            const localVarPath = `/tasks/specifications/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tasksSpecificationsGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a specification
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsRemovePost: async (tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tasksSpecificationsGetPostRequest' is not null or undefined
            assertParamExists('tasksSpecificationsRemovePost', 'tasksSpecificationsGetPostRequest', tasksSpecificationsGetPostRequest)
            const localVarPath = `/tasks/specifications/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tasksSpecificationsGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a type
         * @param {TypeWithID} typeWithID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsTypesCreatePost: async (typeWithID: TypeWithID, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeWithID' is not null or undefined
            assertParamExists('tasksSpecificationsTypesCreatePost', 'typeWithID', typeWithID)
            const localVarPath = `/tasks/specifications/types/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(typeWithID, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsTypesGetAllPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks/specifications/types/get_all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a type by id
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsTypesGetPost: async (tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tasksSpecificationsGetPostRequest' is not null or undefined
            assertParamExists('tasksSpecificationsTypesGetPost', 'tasksSpecificationsGetPostRequest', tasksSpecificationsGetPostRequest)
            const localVarPath = `/tasks/specifications/types/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tasksSpecificationsGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a type
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsTypesRemovePost: async (tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tasksSpecificationsGetPostRequest' is not null or undefined
            assertParamExists('tasksSpecificationsTypesRemovePost', 'tasksSpecificationsGetPostRequest', tasksSpecificationsGetPostRequest)
            const localVarPath = `/tasks/specifications/types/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tasksSpecificationsGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a record
         * @param {TasksUpdatePostRequest} tasksUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksUpdatePost: async (tasksUpdatePostRequest: TasksUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tasksUpdatePostRequest' is not null or undefined
            assertParamExists('tasksUpdatePost', 'tasksUpdatePostRequest', tasksUpdatePostRequest)
            const localVarPath = `/tasks/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tasksUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Allocates N resources
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesAllocatePost(amount: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesAllocatePost(amount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deallocate resources
         * @param {Array<string>} requestBody A list of resource identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesDeallocatePost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesDeallocatePost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Initialize resources
         * @param {Array<ResourceInitializer>} resourceInitializer A dictionary (ResourceID -&gt; Value)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesInitializePost(resourceInitializer: Array<ResourceInitializer>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesInitializePost(resourceInitializer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load resources
         * @param {Array<string>} requestBody A list of resource identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcesLoadPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Resource>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resourcesLoadPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Count records using a filter
         * @param {TasksFilterPostRequest} tasksFilterPostRequest A query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksCountPost(tasksFilterPostRequest: TasksFilterPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksCountPost(tasksFilterPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load records using a filter
         * @param {TasksFilterPostRequest} tasksFilterPostRequest A query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksFilterPost(tasksFilterPostRequest: TasksFilterPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksFilterPost(tasksFilterPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load a set of tasks
         * @param {Array<string>} requestBody A list of task identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksLoadPost(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksLoadPost(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Spawn a new task
         * @param {TaskSpecification} taskSpecification The specification of a task to be spawned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksSpawnPost(taskSpecification: TaskSpecification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskSpawnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksSpawnPost(taskSpecification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a specification
         * @param {Specification} specification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksSpecificationsCreatePost(specification: Specification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksSpecificationsCreatePost(specification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all specifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksSpecificationsGetAllPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Specification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksSpecificationsGetAllPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get specifications by id
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksSpecificationsGetPost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Specification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksSpecificationsGetPost(tasksSpecificationsGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a specification
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksSpecificationsRemovePost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksSpecificationsRemovePost(tasksSpecificationsGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a type
         * @param {TypeWithID} typeWithID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksSpecificationsTypesCreatePost(typeWithID: TypeWithID, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksSpecificationsTypesCreatePost(typeWithID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksSpecificationsTypesGetAllPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypeWithID>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksSpecificationsTypesGetAllPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a type by id
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksSpecificationsTypesGetPost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TypeWithID>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksSpecificationsTypesGetPost(tasksSpecificationsGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a type
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksSpecificationsTypesRemovePost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksSpecificationsTypesRemovePost(tasksSpecificationsGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a record
         * @param {TasksUpdatePostRequest} tasksUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksUpdatePost(tasksUpdatePostRequest: TasksUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksUpdatePost(tasksUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Allocates N resources
         * @param {number} amount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesAllocatePost(amount: number, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.resourcesAllocatePost(amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deallocate resources
         * @param {Array<string>} requestBody A list of resource identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesDeallocatePost(requestBody: Array<string>, options?: any): AxiosPromise<object> {
            return localVarFp.resourcesDeallocatePost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initialize resources
         * @param {Array<ResourceInitializer>} resourceInitializer A dictionary (ResourceID -&gt; Value)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesInitializePost(resourceInitializer: Array<ResourceInitializer>, options?: any): AxiosPromise<object> {
            return localVarFp.resourcesInitializePost(resourceInitializer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load resources
         * @param {Array<string>} requestBody A list of resource identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcesLoadPost(requestBody: Array<string>, options?: any): AxiosPromise<Array<Resource>> {
            return localVarFp.resourcesLoadPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Count records using a filter
         * @param {TasksFilterPostRequest} tasksFilterPostRequest A query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksCountPost(tasksFilterPostRequest: TasksFilterPostRequest, options?: any): AxiosPromise<number> {
            return localVarFp.tasksCountPost(tasksFilterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load records using a filter
         * @param {TasksFilterPostRequest} tasksFilterPostRequest A query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksFilterPost(tasksFilterPostRequest: TasksFilterPostRequest, options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.tasksFilterPost(tasksFilterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load a set of tasks
         * @param {Array<string>} requestBody A list of task identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksLoadPost(requestBody: Array<string>, options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.tasksLoadPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Spawn a new task
         * @param {TaskSpecification} taskSpecification The specification of a task to be spawned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpawnPost(taskSpecification: TaskSpecification, options?: any): AxiosPromise<TaskSpawnResponse> {
            return localVarFp.tasksSpawnPost(taskSpecification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a specification
         * @param {Specification} specification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsCreatePost(specification: Specification, options?: any): AxiosPromise<void> {
            return localVarFp.tasksSpecificationsCreatePost(specification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all specifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsGetAllPost(options?: any): AxiosPromise<Array<Specification>> {
            return localVarFp.tasksSpecificationsGetAllPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get specifications by id
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsGetPost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: any): AxiosPromise<Specification> {
            return localVarFp.tasksSpecificationsGetPost(tasksSpecificationsGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a specification
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsRemovePost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tasksSpecificationsRemovePost(tasksSpecificationsGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a type
         * @param {TypeWithID} typeWithID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsTypesCreatePost(typeWithID: TypeWithID, options?: any): AxiosPromise<void> {
            return localVarFp.tasksSpecificationsTypesCreatePost(typeWithID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsTypesGetAllPost(options?: any): AxiosPromise<Array<TypeWithID>> {
            return localVarFp.tasksSpecificationsTypesGetAllPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a type by id
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsTypesGetPost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: any): AxiosPromise<TypeWithID> {
            return localVarFp.tasksSpecificationsTypesGetPost(tasksSpecificationsGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a type
         * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksSpecificationsTypesRemovePost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.tasksSpecificationsTypesRemovePost(tasksSpecificationsGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a record
         * @param {TasksUpdatePostRequest} tasksUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksUpdatePost(tasksUpdatePostRequest: TasksUpdatePostRequest, options?: any): AxiosPromise<object> {
            return localVarFp.tasksUpdatePost(tasksUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Allocates N resources
     * @param {number} amount 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourcesAllocatePost(amount: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resourcesAllocatePost(amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deallocate resources
     * @param {Array<string>} requestBody A list of resource identifiers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourcesDeallocatePost(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resourcesDeallocatePost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initialize resources
     * @param {Array<ResourceInitializer>} resourceInitializer A dictionary (ResourceID -&gt; Value)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourcesInitializePost(resourceInitializer: Array<ResourceInitializer>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resourcesInitializePost(resourceInitializer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load resources
     * @param {Array<string>} requestBody A list of resource identifiers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourcesLoadPost(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resourcesLoadPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Count records using a filter
     * @param {TasksFilterPostRequest} tasksFilterPostRequest A query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksCountPost(tasksFilterPostRequest: TasksFilterPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksCountPost(tasksFilterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load records using a filter
     * @param {TasksFilterPostRequest} tasksFilterPostRequest A query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksFilterPost(tasksFilterPostRequest: TasksFilterPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksFilterPost(tasksFilterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load a set of tasks
     * @param {Array<string>} requestBody A list of task identifiers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksLoadPost(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksLoadPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Spawn a new task
     * @param {TaskSpecification} taskSpecification The specification of a task to be spawned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksSpawnPost(taskSpecification: TaskSpecification, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksSpawnPost(taskSpecification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a specification
     * @param {Specification} specification 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksSpecificationsCreatePost(specification: Specification, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksSpecificationsCreatePost(specification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all specifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksSpecificationsGetAllPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksSpecificationsGetAllPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get specifications by id
     * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksSpecificationsGetPost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksSpecificationsGetPost(tasksSpecificationsGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a specification
     * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksSpecificationsRemovePost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksSpecificationsRemovePost(tasksSpecificationsGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a type
     * @param {TypeWithID} typeWithID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksSpecificationsTypesCreatePost(typeWithID: TypeWithID, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksSpecificationsTypesCreatePost(typeWithID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksSpecificationsTypesGetAllPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksSpecificationsTypesGetAllPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a type by id
     * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksSpecificationsTypesGetPost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksSpecificationsTypesGetPost(tasksSpecificationsGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a type
     * @param {TasksSpecificationsGetPostRequest} tasksSpecificationsGetPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksSpecificationsTypesRemovePost(tasksSpecificationsGetPostRequest: TasksSpecificationsGetPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksSpecificationsTypesRemovePost(tasksSpecificationsGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a record
     * @param {TasksUpdatePostRequest} tasksUpdatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tasksUpdatePost(tasksUpdatePostRequest: TasksUpdatePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).tasksUpdatePost(tasksUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


