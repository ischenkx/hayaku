/**
 * Kantoku API
 * Create and execute distributed workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Error from './model/Error';
import InfoCursor from './model/InfoCursor';
import RecordMask from './model/RecordMask';
import RecordSorter from './model/RecordSorter';
import Resource from './model/Resource';
import ResourceInitializer from './model/ResourceInitializer';
import Specification from './model/Specification';
import SpecificationBasedTaskParameters from './model/SpecificationBasedTaskParameters';
import SpecificationExecutable from './model/SpecificationExecutable';
import SpecificationIO from './model/SpecificationIO';
import SpecificationResourceSet from './model/SpecificationResourceSet';
import SpecificationResourceSetNamingInner from './model/SpecificationResourceSetNamingInner';
import SpecificationResourceSetTypesInner from './model/SpecificationResourceSetTypesInner';
import Task from './model/Task';
import TaskParameters from './model/TaskParameters';
import TaskSpawnResponse from './model/TaskSpawnResponse';
import TasksFilterPostRequest from './model/TasksFilterPostRequest';
import TasksSpecificationsGetPostRequest from './model/TasksSpecificationsGetPostRequest';
import TasksUpdatePostRequest from './model/TasksUpdatePostRequest';
import Type from './model/Type';
import TypeSubTypes from './model/TypeSubTypes';
import TypeWithID from './model/TypeWithID';
import DefaultApi from './api/DefaultApi';


/**
* Create and execute distributed workflows.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var KantokuApi = require('index'); // See note below*.
* var xxxSvc = new KantokuApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new KantokuApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new KantokuApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new KantokuApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The InfoCursor model constructor.
     * @property {module:model/InfoCursor}
     */
    InfoCursor,

    /**
     * The RecordMask model constructor.
     * @property {module:model/RecordMask}
     */
    RecordMask,

    /**
     * The RecordSorter model constructor.
     * @property {module:model/RecordSorter}
     */
    RecordSorter,

    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource,

    /**
     * The ResourceInitializer model constructor.
     * @property {module:model/ResourceInitializer}
     */
    ResourceInitializer,

    /**
     * The Specification model constructor.
     * @property {module:model/Specification}
     */
    Specification,

    /**
     * The SpecificationBasedTaskParameters model constructor.
     * @property {module:model/SpecificationBasedTaskParameters}
     */
    SpecificationBasedTaskParameters,

    /**
     * The SpecificationExecutable model constructor.
     * @property {module:model/SpecificationExecutable}
     */
    SpecificationExecutable,

    /**
     * The SpecificationIO model constructor.
     * @property {module:model/SpecificationIO}
     */
    SpecificationIO,

    /**
     * The SpecificationResourceSet model constructor.
     * @property {module:model/SpecificationResourceSet}
     */
    SpecificationResourceSet,

    /**
     * The SpecificationResourceSetNamingInner model constructor.
     * @property {module:model/SpecificationResourceSetNamingInner}
     */
    SpecificationResourceSetNamingInner,

    /**
     * The SpecificationResourceSetTypesInner model constructor.
     * @property {module:model/SpecificationResourceSetTypesInner}
     */
    SpecificationResourceSetTypesInner,

    /**
     * The Task model constructor.
     * @property {module:model/Task}
     */
    Task,

    /**
     * The TaskParameters model constructor.
     * @property {module:model/TaskParameters}
     */
    TaskParameters,

    /**
     * The TaskSpawnResponse model constructor.
     * @property {module:model/TaskSpawnResponse}
     */
    TaskSpawnResponse,

    /**
     * The TasksFilterPostRequest model constructor.
     * @property {module:model/TasksFilterPostRequest}
     */
    TasksFilterPostRequest,

    /**
     * The TasksSpecificationsGetPostRequest model constructor.
     * @property {module:model/TasksSpecificationsGetPostRequest}
     */
    TasksSpecificationsGetPostRequest,

    /**
     * The TasksUpdatePostRequest model constructor.
     * @property {module:model/TasksUpdatePostRequest}
     */
    TasksUpdatePostRequest,

    /**
     * The Type model constructor.
     * @property {module:model/Type}
     */
    Type,

    /**
     * The TypeSubTypes model constructor.
     * @property {module:model/TypeSubTypes}
     */
    TypeSubTypes,

    /**
     * The TypeWithID model constructor.
     * @property {module:model/TypeWithID}
     */
    TypeWithID,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
