// Package oas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oas

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Error defines model for Error.
type Error struct {
	// Message A human readable error message
	Message string `json:"message"`
}

// InfoCursor defines model for InfoCursor.
type InfoCursor struct {
	Distinct *[]string       `json:"distinct,omitempty"`
	Limit    *int            `json:"limit,omitempty"`
	Masks    *[]RecordMask   `json:"masks,omitempty"`
	Skip     *int            `json:"skip,omitempty"`
	Sort     *[]RecordSorter `json:"sort,omitempty"`
}

// InfoFilter defines model for InfoFilter.
type InfoFilter = map[string]interface{}

// RecordMask defines model for RecordMask.
type RecordMask struct {
	Operation       string `json:"operation"`
	PropertyPattern string `json:"property_pattern"`
}

// RecordSorter defines model for RecordSorter.
type RecordSorter struct {
	Key      string `json:"key"`
	Ordering string `json:"ordering"`
}

// Resource defines model for Resource.
type Resource struct {
	Id     string `json:"id"`
	Status string `json:"status"`
	Value  string `json:"value"`
}

// ResourceInitializer defines model for ResourceInitializer.
type ResourceInitializer struct {
	Id    string `json:"id"`
	Value string `json:"value"`
}

// Specification defines model for Specification.
type Specification struct {
	Executable SpecificationExecutable `json:"executable"`
	Id         string                  `json:"id"`
	Io         SpecificationIO         `json:"io"`
	Meta       map[string]interface{}  `json:"meta"`
}

// SpecificationBasedTaskParameters defines model for SpecificationBasedTaskParameters.
type SpecificationBasedTaskParameters struct {
	Info          TaskInfo `json:"info"`
	Parameters    []string `json:"parameters"`
	Specification string   `json:"specification"`
}

// SpecificationExecutable defines model for SpecificationExecutable.
type SpecificationExecutable struct {
	Data map[string]interface{} `json:"data"`
	Type string                 `json:"type"`
}

// SpecificationIO defines model for SpecificationIO.
type SpecificationIO struct {
	Inputs  SpecificationResourceSet `json:"inputs"`
	Outputs SpecificationResourceSet `json:"outputs"`
}

// SpecificationResourceSet defines model for SpecificationResourceSet.
type SpecificationResourceSet struct {
	Naming []struct {
		Index int    `json:"index"`
		Name  string `json:"name"`
	} `json:"naming"`
	Types []struct {
		Index int  `json:"index"`
		Type  Type `json:"type"`
	} `json:"types"`
}

// Task defines model for Task.
type Task struct {
	Id      string   `json:"id"`
	Info    TaskInfo `json:"info"`
	Inputs  []string `json:"inputs"`
	Outputs []string `json:"outputs"`
}

// TaskInfo defines model for TaskInfo.
type TaskInfo = map[string]interface{}

// TaskParameters defines model for TaskParameters.
type TaskParameters struct {
	Info    TaskInfo `json:"info"`
	Inputs  []string `json:"inputs"`
	Outputs []string `json:"outputs"`
}

// TaskSpawnResponse defines model for TaskSpawnResponse.
type TaskSpawnResponse struct {
	Id string `json:"id"`
}

// Type defines model for Type.
type Type struct {
	Name     string        `json:"name"`
	SubTypes Type_SubTypes `json:"sub_types"`
}

// Type_SubTypes defines model for Type.SubTypes.
type Type_SubTypes struct {
	Default              *Type           `json:"default,omitempty"`
	AdditionalProperties map[string]Type `json:"-"`
}

// TypeWithID defines model for TypeWithID.
type TypeWithID struct {
	Id   string `json:"id"`
	Type Type   `json:"type"`
}

// PostResourcesAllocateParams defines parameters for PostResourcesAllocate.
type PostResourcesAllocateParams struct {
	Amount int `form:"amount" json:"amount"`
}

// PostResourcesDeallocateJSONBody defines parameters for PostResourcesDeallocate.
type PostResourcesDeallocateJSONBody = []string

// PostResourcesInitializeJSONBody defines parameters for PostResourcesInitialize.
type PostResourcesInitializeJSONBody = []ResourceInitializer

// PostResourcesLoadJSONBody defines parameters for PostResourcesLoad.
type PostResourcesLoadJSONBody = []string

// PostTasksCountJSONBody defines parameters for PostTasksCount.
type PostTasksCountJSONBody struct {
	Cursor *InfoCursor `json:"cursor,omitempty"`
	Filter *InfoFilter `json:"filter,omitempty"`
}

// PostTasksFilterJSONBody defines parameters for PostTasksFilter.
type PostTasksFilterJSONBody struct {
	Cursor *InfoCursor `json:"cursor,omitempty"`
	Filter *InfoFilter `json:"filter,omitempty"`
}

// PostTasksLoadJSONBody defines parameters for PostTasksLoad.
type PostTasksLoadJSONBody = []string

// PostTasksSpecificationsGetJSONBody defines parameters for PostTasksSpecificationsGet.
type PostTasksSpecificationsGetJSONBody struct {
	Id string `json:"id"`
}

// PostTasksSpecificationsRemoveJSONBody defines parameters for PostTasksSpecificationsRemove.
type PostTasksSpecificationsRemoveJSONBody struct {
	Id string `json:"id"`
}

// PostTasksSpecificationsTypesGetJSONBody defines parameters for PostTasksSpecificationsTypesGet.
type PostTasksSpecificationsTypesGetJSONBody struct {
	Id string `json:"id"`
}

// PostTasksSpecificationsTypesRemoveJSONBody defines parameters for PostTasksSpecificationsTypesRemove.
type PostTasksSpecificationsTypesRemoveJSONBody struct {
	Id string `json:"id"`
}

// PostTasksUpdateJSONBody defines parameters for PostTasksUpdate.
type PostTasksUpdateJSONBody struct {
	Filter InfoFilter `json:"filter"`
	Update TaskInfo   `json:"update"`
	Upsert *TaskInfo  `json:"upsert,omitempty"`
}

// PostResourcesDeallocateJSONRequestBody defines body for PostResourcesDeallocate for application/json ContentType.
type PostResourcesDeallocateJSONRequestBody = PostResourcesDeallocateJSONBody

// PostResourcesInitializeJSONRequestBody defines body for PostResourcesInitialize for application/json ContentType.
type PostResourcesInitializeJSONRequestBody = PostResourcesInitializeJSONBody

// PostResourcesLoadJSONRequestBody defines body for PostResourcesLoad for application/json ContentType.
type PostResourcesLoadJSONRequestBody = PostResourcesLoadJSONBody

// PostTasksCountJSONRequestBody defines body for PostTasksCount for application/json ContentType.
type PostTasksCountJSONRequestBody PostTasksCountJSONBody

// PostTasksFilterJSONRequestBody defines body for PostTasksFilter for application/json ContentType.
type PostTasksFilterJSONRequestBody PostTasksFilterJSONBody

// PostTasksLoadJSONRequestBody defines body for PostTasksLoad for application/json ContentType.
type PostTasksLoadJSONRequestBody = PostTasksLoadJSONBody

// PostTasksSpawnJSONRequestBody defines body for PostTasksSpawn for application/json ContentType.
type PostTasksSpawnJSONRequestBody = TaskParameters

// PostTasksSpawnFromSpecJSONRequestBody defines body for PostTasksSpawnFromSpec for application/json ContentType.
type PostTasksSpawnFromSpecJSONRequestBody = SpecificationBasedTaskParameters

// PostTasksSpecificationsCreateJSONRequestBody defines body for PostTasksSpecificationsCreate for application/json ContentType.
type PostTasksSpecificationsCreateJSONRequestBody = Specification

// PostTasksSpecificationsGetJSONRequestBody defines body for PostTasksSpecificationsGet for application/json ContentType.
type PostTasksSpecificationsGetJSONRequestBody PostTasksSpecificationsGetJSONBody

// PostTasksSpecificationsRemoveJSONRequestBody defines body for PostTasksSpecificationsRemove for application/json ContentType.
type PostTasksSpecificationsRemoveJSONRequestBody PostTasksSpecificationsRemoveJSONBody

// PostTasksSpecificationsTypesCreateJSONRequestBody defines body for PostTasksSpecificationsTypesCreate for application/json ContentType.
type PostTasksSpecificationsTypesCreateJSONRequestBody = TypeWithID

// PostTasksSpecificationsTypesGetJSONRequestBody defines body for PostTasksSpecificationsTypesGet for application/json ContentType.
type PostTasksSpecificationsTypesGetJSONRequestBody PostTasksSpecificationsTypesGetJSONBody

// PostTasksSpecificationsTypesRemoveJSONRequestBody defines body for PostTasksSpecificationsTypesRemove for application/json ContentType.
type PostTasksSpecificationsTypesRemoveJSONRequestBody PostTasksSpecificationsTypesRemoveJSONBody

// PostTasksUpdateJSONRequestBody defines body for PostTasksUpdate for application/json ContentType.
type PostTasksUpdateJSONRequestBody PostTasksUpdateJSONBody

// Getter for additional properties for Type_SubTypes. Returns the specified
// element and whether it was found
func (a Type_SubTypes) Get(fieldName string) (value Type, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Type_SubTypes
func (a *Type_SubTypes) Set(fieldName string, value Type) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Type)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Type_SubTypes to handle AdditionalProperties
func (a *Type_SubTypes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["default"]; found {
		err = json.Unmarshal(raw, &a.Default)
		if err != nil {
			return fmt.Errorf("error reading 'default': %w", err)
		}
		delete(object, "default")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Type)
		for fieldName, fieldBuf := range object {
			var fieldVal Type
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Type_SubTypes to handle AdditionalProperties
func (a Type_SubTypes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Default != nil {
		object["default"], err = json.Marshal(a.Default)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'default': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostResourcesAllocate request
	PostResourcesAllocate(ctx context.Context, params *PostResourcesAllocateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResourcesDeallocateWithBody request with any body
	PostResourcesDeallocateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResourcesDeallocate(ctx context.Context, body PostResourcesDeallocateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResourcesInitializeWithBody request with any body
	PostResourcesInitializeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResourcesInitialize(ctx context.Context, body PostResourcesInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResourcesLoadWithBody request with any body
	PostResourcesLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResourcesLoad(ctx context.Context, body PostResourcesLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksCountWithBody request with any body
	PostTasksCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksCount(ctx context.Context, body PostTasksCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksFilterWithBody request with any body
	PostTasksFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksFilter(ctx context.Context, body PostTasksFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksLoadWithBody request with any body
	PostTasksLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksLoad(ctx context.Context, body PostTasksLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpawnWithBody request with any body
	PostTasksSpawnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksSpawn(ctx context.Context, body PostTasksSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpawnFromSpecWithBody request with any body
	PostTasksSpawnFromSpecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksSpawnFromSpec(ctx context.Context, body PostTasksSpawnFromSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpecificationsCreateWithBody request with any body
	PostTasksSpecificationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksSpecificationsCreate(ctx context.Context, body PostTasksSpecificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpecificationsGetWithBody request with any body
	PostTasksSpecificationsGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksSpecificationsGet(ctx context.Context, body PostTasksSpecificationsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpecificationsGetAll request
	PostTasksSpecificationsGetAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpecificationsRemoveWithBody request with any body
	PostTasksSpecificationsRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksSpecificationsRemove(ctx context.Context, body PostTasksSpecificationsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpecificationsTypesCreateWithBody request with any body
	PostTasksSpecificationsTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksSpecificationsTypesCreate(ctx context.Context, body PostTasksSpecificationsTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpecificationsTypesGetWithBody request with any body
	PostTasksSpecificationsTypesGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksSpecificationsTypesGet(ctx context.Context, body PostTasksSpecificationsTypesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpecificationsTypesGetAll request
	PostTasksSpecificationsTypesGetAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpecificationsTypesRemoveWithBody request with any body
	PostTasksSpecificationsTypesRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksSpecificationsTypesRemove(ctx context.Context, body PostTasksSpecificationsTypesRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksUpdateWithBody request with any body
	PostTasksUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksUpdate(ctx context.Context, body PostTasksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostResourcesAllocate(ctx context.Context, params *PostResourcesAllocateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesAllocateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesDeallocateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesDeallocateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesDeallocate(ctx context.Context, body PostResourcesDeallocateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesDeallocateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesInitializeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesInitializeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesInitialize(ctx context.Context, body PostResourcesInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesInitializeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesLoadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesLoad(ctx context.Context, body PostResourcesLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesLoadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksCountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksCount(ctx context.Context, body PostTasksCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksCountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksFilterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksFilterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksFilter(ctx context.Context, body PostTasksFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksFilterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksLoadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksLoad(ctx context.Context, body PostTasksLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksLoadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpawnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpawnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpawn(ctx context.Context, body PostTasksSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpawnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpawnFromSpecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpawnFromSpecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpawnFromSpec(ctx context.Context, body PostTasksSpawnFromSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpawnFromSpecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsCreate(ctx context.Context, body PostTasksSpecificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsGet(ctx context.Context, body PostTasksSpecificationsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsGetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsGetAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsGetAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsRemove(ctx context.Context, body PostTasksSpecificationsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsRemoveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsTypesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsTypesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsTypesCreate(ctx context.Context, body PostTasksSpecificationsTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsTypesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsTypesGetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsTypesGetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsTypesGet(ctx context.Context, body PostTasksSpecificationsTypesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsTypesGetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsTypesGetAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsTypesGetAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsTypesRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsTypesRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpecificationsTypesRemove(ctx context.Context, body PostTasksSpecificationsTypesRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpecificationsTypesRemoveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksUpdate(ctx context.Context, body PostTasksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostResourcesAllocateRequest generates requests for PostResourcesAllocate
func NewPostResourcesAllocateRequest(server string, params *PostResourcesAllocateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/allocate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostResourcesDeallocateRequest calls the generic PostResourcesDeallocate builder with application/json body
func NewPostResourcesDeallocateRequest(server string, body PostResourcesDeallocateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResourcesDeallocateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostResourcesDeallocateRequestWithBody generates requests for PostResourcesDeallocate with any type of body
func NewPostResourcesDeallocateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/deallocate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostResourcesInitializeRequest calls the generic PostResourcesInitialize builder with application/json body
func NewPostResourcesInitializeRequest(server string, body PostResourcesInitializeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResourcesInitializeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostResourcesInitializeRequestWithBody generates requests for PostResourcesInitialize with any type of body
func NewPostResourcesInitializeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/initialize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostResourcesLoadRequest calls the generic PostResourcesLoad builder with application/json body
func NewPostResourcesLoadRequest(server string, body PostResourcesLoadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResourcesLoadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostResourcesLoadRequestWithBody generates requests for PostResourcesLoad with any type of body
func NewPostResourcesLoadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/load")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksCountRequest calls the generic PostTasksCount builder with application/json body
func NewPostTasksCountRequest(server string, body PostTasksCountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksCountRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksCountRequestWithBody generates requests for PostTasksCount with any type of body
func NewPostTasksCountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksFilterRequest calls the generic PostTasksFilter builder with application/json body
func NewPostTasksFilterRequest(server string, body PostTasksFilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksFilterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksFilterRequestWithBody generates requests for PostTasksFilter with any type of body
func NewPostTasksFilterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/filter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksLoadRequest calls the generic PostTasksLoad builder with application/json body
func NewPostTasksLoadRequest(server string, body PostTasksLoadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksLoadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksLoadRequestWithBody generates requests for PostTasksLoad with any type of body
func NewPostTasksLoadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/load")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksSpawnRequest calls the generic PostTasksSpawn builder with application/json body
func NewPostTasksSpawnRequest(server string, body PostTasksSpawnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksSpawnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksSpawnRequestWithBody generates requests for PostTasksSpawn with any type of body
func NewPostTasksSpawnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/spawn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksSpawnFromSpecRequest calls the generic PostTasksSpawnFromSpec builder with application/json body
func NewPostTasksSpawnFromSpecRequest(server string, body PostTasksSpawnFromSpecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksSpawnFromSpecRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksSpawnFromSpecRequestWithBody generates requests for PostTasksSpawnFromSpec with any type of body
func NewPostTasksSpawnFromSpecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/spawn_from_spec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksSpecificationsCreateRequest calls the generic PostTasksSpecificationsCreate builder with application/json body
func NewPostTasksSpecificationsCreateRequest(server string, body PostTasksSpecificationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksSpecificationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksSpecificationsCreateRequestWithBody generates requests for PostTasksSpecificationsCreate with any type of body
func NewPostTasksSpecificationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/specifications/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksSpecificationsGetRequest calls the generic PostTasksSpecificationsGet builder with application/json body
func NewPostTasksSpecificationsGetRequest(server string, body PostTasksSpecificationsGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksSpecificationsGetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksSpecificationsGetRequestWithBody generates requests for PostTasksSpecificationsGet with any type of body
func NewPostTasksSpecificationsGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/specifications/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksSpecificationsGetAllRequest generates requests for PostTasksSpecificationsGetAll
func NewPostTasksSpecificationsGetAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/specifications/get_all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTasksSpecificationsRemoveRequest calls the generic PostTasksSpecificationsRemove builder with application/json body
func NewPostTasksSpecificationsRemoveRequest(server string, body PostTasksSpecificationsRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksSpecificationsRemoveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksSpecificationsRemoveRequestWithBody generates requests for PostTasksSpecificationsRemove with any type of body
func NewPostTasksSpecificationsRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/specifications/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksSpecificationsTypesCreateRequest calls the generic PostTasksSpecificationsTypesCreate builder with application/json body
func NewPostTasksSpecificationsTypesCreateRequest(server string, body PostTasksSpecificationsTypesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksSpecificationsTypesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksSpecificationsTypesCreateRequestWithBody generates requests for PostTasksSpecificationsTypesCreate with any type of body
func NewPostTasksSpecificationsTypesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/specifications/types/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksSpecificationsTypesGetRequest calls the generic PostTasksSpecificationsTypesGet builder with application/json body
func NewPostTasksSpecificationsTypesGetRequest(server string, body PostTasksSpecificationsTypesGetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksSpecificationsTypesGetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksSpecificationsTypesGetRequestWithBody generates requests for PostTasksSpecificationsTypesGet with any type of body
func NewPostTasksSpecificationsTypesGetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/specifications/types/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksSpecificationsTypesGetAllRequest generates requests for PostTasksSpecificationsTypesGetAll
func NewPostTasksSpecificationsTypesGetAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/specifications/types/get_all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTasksSpecificationsTypesRemoveRequest calls the generic PostTasksSpecificationsTypesRemove builder with application/json body
func NewPostTasksSpecificationsTypesRemoveRequest(server string, body PostTasksSpecificationsTypesRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksSpecificationsTypesRemoveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksSpecificationsTypesRemoveRequestWithBody generates requests for PostTasksSpecificationsTypesRemove with any type of body
func NewPostTasksSpecificationsTypesRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/specifications/types/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksUpdateRequest calls the generic PostTasksUpdate builder with application/json body
func NewPostTasksUpdateRequest(server string, body PostTasksUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksUpdateRequestWithBody generates requests for PostTasksUpdate with any type of body
func NewPostTasksUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostResourcesAllocateWithResponse request
	PostResourcesAllocateWithResponse(ctx context.Context, params *PostResourcesAllocateParams, reqEditors ...RequestEditorFn) (*PostResourcesAllocateResponse, error)

	// PostResourcesDeallocateWithBodyWithResponse request with any body
	PostResourcesDeallocateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesDeallocateResponse, error)

	PostResourcesDeallocateWithResponse(ctx context.Context, body PostResourcesDeallocateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesDeallocateResponse, error)

	// PostResourcesInitializeWithBodyWithResponse request with any body
	PostResourcesInitializeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesInitializeResponse, error)

	PostResourcesInitializeWithResponse(ctx context.Context, body PostResourcesInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesInitializeResponse, error)

	// PostResourcesLoadWithBodyWithResponse request with any body
	PostResourcesLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesLoadResponse, error)

	PostResourcesLoadWithResponse(ctx context.Context, body PostResourcesLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesLoadResponse, error)

	// PostTasksCountWithBodyWithResponse request with any body
	PostTasksCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksCountResponse, error)

	PostTasksCountWithResponse(ctx context.Context, body PostTasksCountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksCountResponse, error)

	// PostTasksFilterWithBodyWithResponse request with any body
	PostTasksFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksFilterResponse, error)

	PostTasksFilterWithResponse(ctx context.Context, body PostTasksFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksFilterResponse, error)

	// PostTasksLoadWithBodyWithResponse request with any body
	PostTasksLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksLoadResponse, error)

	PostTasksLoadWithResponse(ctx context.Context, body PostTasksLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksLoadResponse, error)

	// PostTasksSpawnWithBodyWithResponse request with any body
	PostTasksSpawnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpawnResponse, error)

	PostTasksSpawnWithResponse(ctx context.Context, body PostTasksSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpawnResponse, error)

	// PostTasksSpawnFromSpecWithBodyWithResponse request with any body
	PostTasksSpawnFromSpecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpawnFromSpecResponse, error)

	PostTasksSpawnFromSpecWithResponse(ctx context.Context, body PostTasksSpawnFromSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpawnFromSpecResponse, error)

	// PostTasksSpecificationsCreateWithBodyWithResponse request with any body
	PostTasksSpecificationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsCreateResponse, error)

	PostTasksSpecificationsCreateWithResponse(ctx context.Context, body PostTasksSpecificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsCreateResponse, error)

	// PostTasksSpecificationsGetWithBodyWithResponse request with any body
	PostTasksSpecificationsGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsGetResponse, error)

	PostTasksSpecificationsGetWithResponse(ctx context.Context, body PostTasksSpecificationsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsGetResponse, error)

	// PostTasksSpecificationsGetAllWithResponse request
	PostTasksSpecificationsGetAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsGetAllResponse, error)

	// PostTasksSpecificationsRemoveWithBodyWithResponse request with any body
	PostTasksSpecificationsRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsRemoveResponse, error)

	PostTasksSpecificationsRemoveWithResponse(ctx context.Context, body PostTasksSpecificationsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsRemoveResponse, error)

	// PostTasksSpecificationsTypesCreateWithBodyWithResponse request with any body
	PostTasksSpecificationsTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesCreateResponse, error)

	PostTasksSpecificationsTypesCreateWithResponse(ctx context.Context, body PostTasksSpecificationsTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesCreateResponse, error)

	// PostTasksSpecificationsTypesGetWithBodyWithResponse request with any body
	PostTasksSpecificationsTypesGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesGetResponse, error)

	PostTasksSpecificationsTypesGetWithResponse(ctx context.Context, body PostTasksSpecificationsTypesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesGetResponse, error)

	// PostTasksSpecificationsTypesGetAllWithResponse request
	PostTasksSpecificationsTypesGetAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesGetAllResponse, error)

	// PostTasksSpecificationsTypesRemoveWithBodyWithResponse request with any body
	PostTasksSpecificationsTypesRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesRemoveResponse, error)

	PostTasksSpecificationsTypesRemoveWithResponse(ctx context.Context, body PostTasksSpecificationsTypesRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesRemoveResponse, error)

	// PostTasksUpdateWithBodyWithResponse request with any body
	PostTasksUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksUpdateResponse, error)

	PostTasksUpdateWithResponse(ctx context.Context, body PostTasksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksUpdateResponse, error)
}

type PostResourcesAllocateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostResourcesAllocateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesAllocateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResourcesDeallocateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostResourcesDeallocateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesDeallocateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResourcesInitializeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostResourcesInitializeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesInitializeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResourcesLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Resource
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostResourcesLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpawnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskSpawnResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpawnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpawnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpawnFromSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskSpawnResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpawnFromSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpawnFromSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpecificationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpecificationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpecificationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpecificationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Specification
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpecificationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpecificationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpecificationsGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Specification
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpecificationsGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpecificationsGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpecificationsRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpecificationsRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpecificationsRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpecificationsTypesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpecificationsTypesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpecificationsTypesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpecificationsTypesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TypeWithID
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpecificationsTypesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpecificationsTypesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpecificationsTypesGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TypeWithID
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpecificationsTypesGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpecificationsTypesGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpecificationsTypesRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpecificationsTypesRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpecificationsTypesRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostResourcesAllocateWithResponse request returning *PostResourcesAllocateResponse
func (c *ClientWithResponses) PostResourcesAllocateWithResponse(ctx context.Context, params *PostResourcesAllocateParams, reqEditors ...RequestEditorFn) (*PostResourcesAllocateResponse, error) {
	rsp, err := c.PostResourcesAllocate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesAllocateResponse(rsp)
}

// PostResourcesDeallocateWithBodyWithResponse request with arbitrary body returning *PostResourcesDeallocateResponse
func (c *ClientWithResponses) PostResourcesDeallocateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesDeallocateResponse, error) {
	rsp, err := c.PostResourcesDeallocateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesDeallocateResponse(rsp)
}

func (c *ClientWithResponses) PostResourcesDeallocateWithResponse(ctx context.Context, body PostResourcesDeallocateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesDeallocateResponse, error) {
	rsp, err := c.PostResourcesDeallocate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesDeallocateResponse(rsp)
}

// PostResourcesInitializeWithBodyWithResponse request with arbitrary body returning *PostResourcesInitializeResponse
func (c *ClientWithResponses) PostResourcesInitializeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesInitializeResponse, error) {
	rsp, err := c.PostResourcesInitializeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesInitializeResponse(rsp)
}

func (c *ClientWithResponses) PostResourcesInitializeWithResponse(ctx context.Context, body PostResourcesInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesInitializeResponse, error) {
	rsp, err := c.PostResourcesInitialize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesInitializeResponse(rsp)
}

// PostResourcesLoadWithBodyWithResponse request with arbitrary body returning *PostResourcesLoadResponse
func (c *ClientWithResponses) PostResourcesLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesLoadResponse, error) {
	rsp, err := c.PostResourcesLoadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesLoadResponse(rsp)
}

func (c *ClientWithResponses) PostResourcesLoadWithResponse(ctx context.Context, body PostResourcesLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesLoadResponse, error) {
	rsp, err := c.PostResourcesLoad(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesLoadResponse(rsp)
}

// PostTasksCountWithBodyWithResponse request with arbitrary body returning *PostTasksCountResponse
func (c *ClientWithResponses) PostTasksCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksCountResponse, error) {
	rsp, err := c.PostTasksCountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksCountResponse(rsp)
}

func (c *ClientWithResponses) PostTasksCountWithResponse(ctx context.Context, body PostTasksCountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksCountResponse, error) {
	rsp, err := c.PostTasksCount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksCountResponse(rsp)
}

// PostTasksFilterWithBodyWithResponse request with arbitrary body returning *PostTasksFilterResponse
func (c *ClientWithResponses) PostTasksFilterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksFilterResponse, error) {
	rsp, err := c.PostTasksFilterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksFilterResponse(rsp)
}

func (c *ClientWithResponses) PostTasksFilterWithResponse(ctx context.Context, body PostTasksFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksFilterResponse, error) {
	rsp, err := c.PostTasksFilter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksFilterResponse(rsp)
}

// PostTasksLoadWithBodyWithResponse request with arbitrary body returning *PostTasksLoadResponse
func (c *ClientWithResponses) PostTasksLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksLoadResponse, error) {
	rsp, err := c.PostTasksLoadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksLoadResponse(rsp)
}

func (c *ClientWithResponses) PostTasksLoadWithResponse(ctx context.Context, body PostTasksLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksLoadResponse, error) {
	rsp, err := c.PostTasksLoad(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksLoadResponse(rsp)
}

// PostTasksSpawnWithBodyWithResponse request with arbitrary body returning *PostTasksSpawnResponse
func (c *ClientWithResponses) PostTasksSpawnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpawnResponse, error) {
	rsp, err := c.PostTasksSpawnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpawnResponse(rsp)
}

func (c *ClientWithResponses) PostTasksSpawnWithResponse(ctx context.Context, body PostTasksSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpawnResponse, error) {
	rsp, err := c.PostTasksSpawn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpawnResponse(rsp)
}

// PostTasksSpawnFromSpecWithBodyWithResponse request with arbitrary body returning *PostTasksSpawnFromSpecResponse
func (c *ClientWithResponses) PostTasksSpawnFromSpecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpawnFromSpecResponse, error) {
	rsp, err := c.PostTasksSpawnFromSpecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpawnFromSpecResponse(rsp)
}

func (c *ClientWithResponses) PostTasksSpawnFromSpecWithResponse(ctx context.Context, body PostTasksSpawnFromSpecJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpawnFromSpecResponse, error) {
	rsp, err := c.PostTasksSpawnFromSpec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpawnFromSpecResponse(rsp)
}

// PostTasksSpecificationsCreateWithBodyWithResponse request with arbitrary body returning *PostTasksSpecificationsCreateResponse
func (c *ClientWithResponses) PostTasksSpecificationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsCreateResponse, error) {
	rsp, err := c.PostTasksSpecificationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsCreateResponse(rsp)
}

func (c *ClientWithResponses) PostTasksSpecificationsCreateWithResponse(ctx context.Context, body PostTasksSpecificationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsCreateResponse, error) {
	rsp, err := c.PostTasksSpecificationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsCreateResponse(rsp)
}

// PostTasksSpecificationsGetWithBodyWithResponse request with arbitrary body returning *PostTasksSpecificationsGetResponse
func (c *ClientWithResponses) PostTasksSpecificationsGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsGetResponse, error) {
	rsp, err := c.PostTasksSpecificationsGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsGetResponse(rsp)
}

func (c *ClientWithResponses) PostTasksSpecificationsGetWithResponse(ctx context.Context, body PostTasksSpecificationsGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsGetResponse, error) {
	rsp, err := c.PostTasksSpecificationsGet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsGetResponse(rsp)
}

// PostTasksSpecificationsGetAllWithResponse request returning *PostTasksSpecificationsGetAllResponse
func (c *ClientWithResponses) PostTasksSpecificationsGetAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsGetAllResponse, error) {
	rsp, err := c.PostTasksSpecificationsGetAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsGetAllResponse(rsp)
}

// PostTasksSpecificationsRemoveWithBodyWithResponse request with arbitrary body returning *PostTasksSpecificationsRemoveResponse
func (c *ClientWithResponses) PostTasksSpecificationsRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsRemoveResponse, error) {
	rsp, err := c.PostTasksSpecificationsRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostTasksSpecificationsRemoveWithResponse(ctx context.Context, body PostTasksSpecificationsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsRemoveResponse, error) {
	rsp, err := c.PostTasksSpecificationsRemove(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsRemoveResponse(rsp)
}

// PostTasksSpecificationsTypesCreateWithBodyWithResponse request with arbitrary body returning *PostTasksSpecificationsTypesCreateResponse
func (c *ClientWithResponses) PostTasksSpecificationsTypesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesCreateResponse, error) {
	rsp, err := c.PostTasksSpecificationsTypesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsTypesCreateResponse(rsp)
}

func (c *ClientWithResponses) PostTasksSpecificationsTypesCreateWithResponse(ctx context.Context, body PostTasksSpecificationsTypesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesCreateResponse, error) {
	rsp, err := c.PostTasksSpecificationsTypesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsTypesCreateResponse(rsp)
}

// PostTasksSpecificationsTypesGetWithBodyWithResponse request with arbitrary body returning *PostTasksSpecificationsTypesGetResponse
func (c *ClientWithResponses) PostTasksSpecificationsTypesGetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesGetResponse, error) {
	rsp, err := c.PostTasksSpecificationsTypesGetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsTypesGetResponse(rsp)
}

func (c *ClientWithResponses) PostTasksSpecificationsTypesGetWithResponse(ctx context.Context, body PostTasksSpecificationsTypesGetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesGetResponse, error) {
	rsp, err := c.PostTasksSpecificationsTypesGet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsTypesGetResponse(rsp)
}

// PostTasksSpecificationsTypesGetAllWithResponse request returning *PostTasksSpecificationsTypesGetAllResponse
func (c *ClientWithResponses) PostTasksSpecificationsTypesGetAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesGetAllResponse, error) {
	rsp, err := c.PostTasksSpecificationsTypesGetAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsTypesGetAllResponse(rsp)
}

// PostTasksSpecificationsTypesRemoveWithBodyWithResponse request with arbitrary body returning *PostTasksSpecificationsTypesRemoveResponse
func (c *ClientWithResponses) PostTasksSpecificationsTypesRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesRemoveResponse, error) {
	rsp, err := c.PostTasksSpecificationsTypesRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsTypesRemoveResponse(rsp)
}

func (c *ClientWithResponses) PostTasksSpecificationsTypesRemoveWithResponse(ctx context.Context, body PostTasksSpecificationsTypesRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpecificationsTypesRemoveResponse, error) {
	rsp, err := c.PostTasksSpecificationsTypesRemove(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpecificationsTypesRemoveResponse(rsp)
}

// PostTasksUpdateWithBodyWithResponse request with arbitrary body returning *PostTasksUpdateResponse
func (c *ClientWithResponses) PostTasksUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksUpdateResponse, error) {
	rsp, err := c.PostTasksUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostTasksUpdateWithResponse(ctx context.Context, body PostTasksUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksUpdateResponse, error) {
	rsp, err := c.PostTasksUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksUpdateResponse(rsp)
}

// ParsePostResourcesAllocateResponse parses an HTTP response from a PostResourcesAllocateWithResponse call
func ParsePostResourcesAllocateResponse(rsp *http.Response) (*PostResourcesAllocateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesAllocateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostResourcesDeallocateResponse parses an HTTP response from a PostResourcesDeallocateWithResponse call
func ParsePostResourcesDeallocateResponse(rsp *http.Response) (*PostResourcesDeallocateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesDeallocateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostResourcesInitializeResponse parses an HTTP response from a PostResourcesInitializeWithResponse call
func ParsePostResourcesInitializeResponse(rsp *http.Response) (*PostResourcesInitializeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesInitializeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostResourcesLoadResponse parses an HTTP response from a PostResourcesLoadWithResponse call
func ParsePostResourcesLoadResponse(rsp *http.Response) (*PostResourcesLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Resource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksCountResponse parses an HTTP response from a PostTasksCountWithResponse call
func ParsePostTasksCountResponse(rsp *http.Response) (*PostTasksCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksFilterResponse parses an HTTP response from a PostTasksFilterWithResponse call
func ParsePostTasksFilterResponse(rsp *http.Response) (*PostTasksFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksLoadResponse parses an HTTP response from a PostTasksLoadWithResponse call
func ParsePostTasksLoadResponse(rsp *http.Response) (*PostTasksLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpawnResponse parses an HTTP response from a PostTasksSpawnWithResponse call
func ParsePostTasksSpawnResponse(rsp *http.Response) (*PostTasksSpawnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpawnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskSpawnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpawnFromSpecResponse parses an HTTP response from a PostTasksSpawnFromSpecWithResponse call
func ParsePostTasksSpawnFromSpecResponse(rsp *http.Response) (*PostTasksSpawnFromSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpawnFromSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskSpawnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpecificationsCreateResponse parses an HTTP response from a PostTasksSpecificationsCreateWithResponse call
func ParsePostTasksSpecificationsCreateResponse(rsp *http.Response) (*PostTasksSpecificationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpecificationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpecificationsGetResponse parses an HTTP response from a PostTasksSpecificationsGetWithResponse call
func ParsePostTasksSpecificationsGetResponse(rsp *http.Response) (*PostTasksSpecificationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpecificationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Specification
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpecificationsGetAllResponse parses an HTTP response from a PostTasksSpecificationsGetAllWithResponse call
func ParsePostTasksSpecificationsGetAllResponse(rsp *http.Response) (*PostTasksSpecificationsGetAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpecificationsGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Specification
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpecificationsRemoveResponse parses an HTTP response from a PostTasksSpecificationsRemoveWithResponse call
func ParsePostTasksSpecificationsRemoveResponse(rsp *http.Response) (*PostTasksSpecificationsRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpecificationsRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpecificationsTypesCreateResponse parses an HTTP response from a PostTasksSpecificationsTypesCreateWithResponse call
func ParsePostTasksSpecificationsTypesCreateResponse(rsp *http.Response) (*PostTasksSpecificationsTypesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpecificationsTypesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpecificationsTypesGetResponse parses an HTTP response from a PostTasksSpecificationsTypesGetWithResponse call
func ParsePostTasksSpecificationsTypesGetResponse(rsp *http.Response) (*PostTasksSpecificationsTypesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpecificationsTypesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TypeWithID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpecificationsTypesGetAllResponse parses an HTTP response from a PostTasksSpecificationsTypesGetAllWithResponse call
func ParsePostTasksSpecificationsTypesGetAllResponse(rsp *http.Response) (*PostTasksSpecificationsTypesGetAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpecificationsTypesGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TypeWithID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpecificationsTypesRemoveResponse parses an HTTP response from a PostTasksSpecificationsTypesRemoveWithResponse call
func ParsePostTasksSpecificationsTypesRemoveResponse(rsp *http.Response) (*PostTasksSpecificationsTypesRemoveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpecificationsTypesRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksUpdateResponse parses an HTTP response from a PostTasksUpdateWithResponse call
func ParsePostTasksUpdateResponse(rsp *http.Response) (*PostTasksUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Allocates N resources
	// (POST /resources/allocate)
	PostResourcesAllocate(ctx echo.Context, params PostResourcesAllocateParams) error
	// Deallocate resources
	// (POST /resources/deallocate)
	PostResourcesDeallocate(ctx echo.Context) error
	// Initialize resources
	// (POST /resources/initialize)
	PostResourcesInitialize(ctx echo.Context) error
	// Load resources
	// (POST /resources/load)
	PostResourcesLoad(ctx echo.Context) error
	// Count records using a filter
	// (POST /tasks/count)
	PostTasksCount(ctx echo.Context) error
	// Load records using a filter
	// (POST /tasks/filter)
	PostTasksFilter(ctx echo.Context) error
	// Load a set of tasks
	// (POST /tasks/load)
	PostTasksLoad(ctx echo.Context) error
	// Spawn a new task
	// (POST /tasks/spawn)
	PostTasksSpawn(ctx echo.Context) error
	// Spawn a new task from specification
	// (POST /tasks/spawn_from_spec)
	PostTasksSpawnFromSpec(ctx echo.Context) error
	// Create a specification
	// (POST /tasks/specifications/create)
	PostTasksSpecificationsCreate(ctx echo.Context) error
	// Get specifications by id
	// (POST /tasks/specifications/get)
	PostTasksSpecificationsGet(ctx echo.Context) error
	// Get all specifications
	// (POST /tasks/specifications/get_all)
	PostTasksSpecificationsGetAll(ctx echo.Context) error
	// Remove a specification
	// (POST /tasks/specifications/remove)
	PostTasksSpecificationsRemove(ctx echo.Context) error
	// Create a type
	// (POST /tasks/specifications/types/create)
	PostTasksSpecificationsTypesCreate(ctx echo.Context) error
	// Get a type by id
	// (POST /tasks/specifications/types/get)
	PostTasksSpecificationsTypesGet(ctx echo.Context) error
	// Get all types
	// (POST /tasks/specifications/types/get_all)
	PostTasksSpecificationsTypesGetAll(ctx echo.Context) error
	// Remove a type
	// (POST /tasks/specifications/types/remove)
	PostTasksSpecificationsTypesRemove(ctx echo.Context) error
	// Update a record
	// (POST /tasks/update)
	PostTasksUpdate(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostResourcesAllocate converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourcesAllocate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostResourcesAllocateParams
	// ------------- Required query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, true, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostResourcesAllocate(ctx, params)
	return err
}

// PostResourcesDeallocate converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourcesDeallocate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostResourcesDeallocate(ctx)
	return err
}

// PostResourcesInitialize converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourcesInitialize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostResourcesInitialize(ctx)
	return err
}

// PostResourcesLoad converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourcesLoad(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostResourcesLoad(ctx)
	return err
}

// PostTasksCount converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksCount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksCount(ctx)
	return err
}

// PostTasksFilter converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksFilter(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksFilter(ctx)
	return err
}

// PostTasksLoad converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksLoad(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksLoad(ctx)
	return err
}

// PostTasksSpawn converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpawn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpawn(ctx)
	return err
}

// PostTasksSpawnFromSpec converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpawnFromSpec(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpawnFromSpec(ctx)
	return err
}

// PostTasksSpecificationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpecificationsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpecificationsCreate(ctx)
	return err
}

// PostTasksSpecificationsGet converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpecificationsGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpecificationsGet(ctx)
	return err
}

// PostTasksSpecificationsGetAll converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpecificationsGetAll(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpecificationsGetAll(ctx)
	return err
}

// PostTasksSpecificationsRemove converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpecificationsRemove(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpecificationsRemove(ctx)
	return err
}

// PostTasksSpecificationsTypesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpecificationsTypesCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpecificationsTypesCreate(ctx)
	return err
}

// PostTasksSpecificationsTypesGet converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpecificationsTypesGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpecificationsTypesGet(ctx)
	return err
}

// PostTasksSpecificationsTypesGetAll converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpecificationsTypesGetAll(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpecificationsTypesGetAll(ctx)
	return err
}

// PostTasksSpecificationsTypesRemove converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpecificationsTypesRemove(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpecificationsTypesRemove(ctx)
	return err
}

// PostTasksUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksUpdate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksUpdate(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/resources/allocate", wrapper.PostResourcesAllocate)
	router.POST(baseURL+"/resources/deallocate", wrapper.PostResourcesDeallocate)
	router.POST(baseURL+"/resources/initialize", wrapper.PostResourcesInitialize)
	router.POST(baseURL+"/resources/load", wrapper.PostResourcesLoad)
	router.POST(baseURL+"/tasks/count", wrapper.PostTasksCount)
	router.POST(baseURL+"/tasks/filter", wrapper.PostTasksFilter)
	router.POST(baseURL+"/tasks/load", wrapper.PostTasksLoad)
	router.POST(baseURL+"/tasks/spawn", wrapper.PostTasksSpawn)
	router.POST(baseURL+"/tasks/spawn_from_spec", wrapper.PostTasksSpawnFromSpec)
	router.POST(baseURL+"/tasks/specifications/create", wrapper.PostTasksSpecificationsCreate)
	router.POST(baseURL+"/tasks/specifications/get", wrapper.PostTasksSpecificationsGet)
	router.POST(baseURL+"/tasks/specifications/get_all", wrapper.PostTasksSpecificationsGetAll)
	router.POST(baseURL+"/tasks/specifications/remove", wrapper.PostTasksSpecificationsRemove)
	router.POST(baseURL+"/tasks/specifications/types/create", wrapper.PostTasksSpecificationsTypesCreate)
	router.POST(baseURL+"/tasks/specifications/types/get", wrapper.PostTasksSpecificationsTypesGet)
	router.POST(baseURL+"/tasks/specifications/types/get_all", wrapper.PostTasksSpecificationsTypesGetAll)
	router.POST(baseURL+"/tasks/specifications/types/remove", wrapper.PostTasksSpecificationsTypesRemove)
	router.POST(baseURL+"/tasks/update", wrapper.PostTasksUpdate)

}

type PostResourcesAllocateRequestObject struct {
	Params PostResourcesAllocateParams
}

type PostResourcesAllocateResponseObject interface {
	VisitPostResourcesAllocateResponse(w http.ResponseWriter) error
}

type PostResourcesAllocate200JSONResponse []string

func (response PostResourcesAllocate200JSONResponse) VisitPostResourcesAllocateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesAllocate500JSONResponse Error

func (response PostResourcesAllocate500JSONResponse) VisitPostResourcesAllocateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesDeallocateRequestObject struct {
	Body *PostResourcesDeallocateJSONRequestBody
}

type PostResourcesDeallocateResponseObject interface {
	VisitPostResourcesDeallocateResponse(w http.ResponseWriter) error
}

type PostResourcesDeallocate200JSONResponse map[string]interface{}

func (response PostResourcesDeallocate200JSONResponse) VisitPostResourcesDeallocateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesDeallocate500JSONResponse Error

func (response PostResourcesDeallocate500JSONResponse) VisitPostResourcesDeallocateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesInitializeRequestObject struct {
	Body *PostResourcesInitializeJSONRequestBody
}

type PostResourcesInitializeResponseObject interface {
	VisitPostResourcesInitializeResponse(w http.ResponseWriter) error
}

type PostResourcesInitialize200JSONResponse map[string]interface{}

func (response PostResourcesInitialize200JSONResponse) VisitPostResourcesInitializeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesInitialize500JSONResponse Error

func (response PostResourcesInitialize500JSONResponse) VisitPostResourcesInitializeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesLoadRequestObject struct {
	Body *PostResourcesLoadJSONRequestBody
}

type PostResourcesLoadResponseObject interface {
	VisitPostResourcesLoadResponse(w http.ResponseWriter) error
}

type PostResourcesLoad200JSONResponse []Resource

func (response PostResourcesLoad200JSONResponse) VisitPostResourcesLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesLoad500JSONResponse Error

func (response PostResourcesLoad500JSONResponse) VisitPostResourcesLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksCountRequestObject struct {
	Body *PostTasksCountJSONRequestBody
}

type PostTasksCountResponseObject interface {
	VisitPostTasksCountResponse(w http.ResponseWriter) error
}

type PostTasksCount200JSONResponse int

func (response PostTasksCount200JSONResponse) VisitPostTasksCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksCount500JSONResponse Error

func (response PostTasksCount500JSONResponse) VisitPostTasksCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksFilterRequestObject struct {
	Body *PostTasksFilterJSONRequestBody
}

type PostTasksFilterResponseObject interface {
	VisitPostTasksFilterResponse(w http.ResponseWriter) error
}

type PostTasksFilter200JSONResponse []Task

func (response PostTasksFilter200JSONResponse) VisitPostTasksFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksFilter500JSONResponse Error

func (response PostTasksFilter500JSONResponse) VisitPostTasksFilterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksLoadRequestObject struct {
	Body *PostTasksLoadJSONRequestBody
}

type PostTasksLoadResponseObject interface {
	VisitPostTasksLoadResponse(w http.ResponseWriter) error
}

type PostTasksLoad200JSONResponse []Task

func (response PostTasksLoad200JSONResponse) VisitPostTasksLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksLoad500JSONResponse Error

func (response PostTasksLoad500JSONResponse) VisitPostTasksLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpawnRequestObject struct {
	Body *PostTasksSpawnJSONRequestBody
}

type PostTasksSpawnResponseObject interface {
	VisitPostTasksSpawnResponse(w http.ResponseWriter) error
}

type PostTasksSpawn200JSONResponse TaskSpawnResponse

func (response PostTasksSpawn200JSONResponse) VisitPostTasksSpawnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpawn500JSONResponse Error

func (response PostTasksSpawn500JSONResponse) VisitPostTasksSpawnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpawnFromSpecRequestObject struct {
	Body *PostTasksSpawnFromSpecJSONRequestBody
}

type PostTasksSpawnFromSpecResponseObject interface {
	VisitPostTasksSpawnFromSpecResponse(w http.ResponseWriter) error
}

type PostTasksSpawnFromSpec200JSONResponse TaskSpawnResponse

func (response PostTasksSpawnFromSpec200JSONResponse) VisitPostTasksSpawnFromSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpawnFromSpec500JSONResponse Error

func (response PostTasksSpawnFromSpec500JSONResponse) VisitPostTasksSpawnFromSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsCreateRequestObject struct {
	Body *PostTasksSpecificationsCreateJSONRequestBody
}

type PostTasksSpecificationsCreateResponseObject interface {
	VisitPostTasksSpecificationsCreateResponse(w http.ResponseWriter) error
}

type PostTasksSpecificationsCreate200Response struct {
}

func (response PostTasksSpecificationsCreate200Response) VisitPostTasksSpecificationsCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostTasksSpecificationsCreate500JSONResponse Error

func (response PostTasksSpecificationsCreate500JSONResponse) VisitPostTasksSpecificationsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsGetRequestObject struct {
	Body *PostTasksSpecificationsGetJSONRequestBody
}

type PostTasksSpecificationsGetResponseObject interface {
	VisitPostTasksSpecificationsGetResponse(w http.ResponseWriter) error
}

type PostTasksSpecificationsGet200JSONResponse Specification

func (response PostTasksSpecificationsGet200JSONResponse) VisitPostTasksSpecificationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsGet500JSONResponse Error

func (response PostTasksSpecificationsGet500JSONResponse) VisitPostTasksSpecificationsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsGetAllRequestObject struct {
}

type PostTasksSpecificationsGetAllResponseObject interface {
	VisitPostTasksSpecificationsGetAllResponse(w http.ResponseWriter) error
}

type PostTasksSpecificationsGetAll200JSONResponse []Specification

func (response PostTasksSpecificationsGetAll200JSONResponse) VisitPostTasksSpecificationsGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsGetAll500JSONResponse Error

func (response PostTasksSpecificationsGetAll500JSONResponse) VisitPostTasksSpecificationsGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsRemoveRequestObject struct {
	Body *PostTasksSpecificationsRemoveJSONRequestBody
}

type PostTasksSpecificationsRemoveResponseObject interface {
	VisitPostTasksSpecificationsRemoveResponse(w http.ResponseWriter) error
}

type PostTasksSpecificationsRemove200Response struct {
}

func (response PostTasksSpecificationsRemove200Response) VisitPostTasksSpecificationsRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostTasksSpecificationsRemove500JSONResponse Error

func (response PostTasksSpecificationsRemove500JSONResponse) VisitPostTasksSpecificationsRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsTypesCreateRequestObject struct {
	Body *PostTasksSpecificationsTypesCreateJSONRequestBody
}

type PostTasksSpecificationsTypesCreateResponseObject interface {
	VisitPostTasksSpecificationsTypesCreateResponse(w http.ResponseWriter) error
}

type PostTasksSpecificationsTypesCreate200Response struct {
}

func (response PostTasksSpecificationsTypesCreate200Response) VisitPostTasksSpecificationsTypesCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostTasksSpecificationsTypesCreate500JSONResponse Error

func (response PostTasksSpecificationsTypesCreate500JSONResponse) VisitPostTasksSpecificationsTypesCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsTypesGetRequestObject struct {
	Body *PostTasksSpecificationsTypesGetJSONRequestBody
}

type PostTasksSpecificationsTypesGetResponseObject interface {
	VisitPostTasksSpecificationsTypesGetResponse(w http.ResponseWriter) error
}

type PostTasksSpecificationsTypesGet200JSONResponse TypeWithID

func (response PostTasksSpecificationsTypesGet200JSONResponse) VisitPostTasksSpecificationsTypesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsTypesGet500JSONResponse Error

func (response PostTasksSpecificationsTypesGet500JSONResponse) VisitPostTasksSpecificationsTypesGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsTypesGetAllRequestObject struct {
}

type PostTasksSpecificationsTypesGetAllResponseObject interface {
	VisitPostTasksSpecificationsTypesGetAllResponse(w http.ResponseWriter) error
}

type PostTasksSpecificationsTypesGetAll200JSONResponse []TypeWithID

func (response PostTasksSpecificationsTypesGetAll200JSONResponse) VisitPostTasksSpecificationsTypesGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsTypesGetAll500JSONResponse Error

func (response PostTasksSpecificationsTypesGetAll500JSONResponse) VisitPostTasksSpecificationsTypesGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpecificationsTypesRemoveRequestObject struct {
	Body *PostTasksSpecificationsTypesRemoveJSONRequestBody
}

type PostTasksSpecificationsTypesRemoveResponseObject interface {
	VisitPostTasksSpecificationsTypesRemoveResponse(w http.ResponseWriter) error
}

type PostTasksSpecificationsTypesRemove200Response struct {
}

func (response PostTasksSpecificationsTypesRemove200Response) VisitPostTasksSpecificationsTypesRemoveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostTasksSpecificationsTypesRemove500JSONResponse Error

func (response PostTasksSpecificationsTypesRemove500JSONResponse) VisitPostTasksSpecificationsTypesRemoveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksUpdateRequestObject struct {
	Body *PostTasksUpdateJSONRequestBody
}

type PostTasksUpdateResponseObject interface {
	VisitPostTasksUpdateResponse(w http.ResponseWriter) error
}

type PostTasksUpdate200JSONResponse map[string]interface{}

func (response PostTasksUpdate200JSONResponse) VisitPostTasksUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksUpdate500JSONResponse Error

func (response PostTasksUpdate500JSONResponse) VisitPostTasksUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Allocates N resources
	// (POST /resources/allocate)
	PostResourcesAllocate(ctx context.Context, request PostResourcesAllocateRequestObject) (PostResourcesAllocateResponseObject, error)
	// Deallocate resources
	// (POST /resources/deallocate)
	PostResourcesDeallocate(ctx context.Context, request PostResourcesDeallocateRequestObject) (PostResourcesDeallocateResponseObject, error)
	// Initialize resources
	// (POST /resources/initialize)
	PostResourcesInitialize(ctx context.Context, request PostResourcesInitializeRequestObject) (PostResourcesInitializeResponseObject, error)
	// Load resources
	// (POST /resources/load)
	PostResourcesLoad(ctx context.Context, request PostResourcesLoadRequestObject) (PostResourcesLoadResponseObject, error)
	// Count records using a filter
	// (POST /tasks/count)
	PostTasksCount(ctx context.Context, request PostTasksCountRequestObject) (PostTasksCountResponseObject, error)
	// Load records using a filter
	// (POST /tasks/filter)
	PostTasksFilter(ctx context.Context, request PostTasksFilterRequestObject) (PostTasksFilterResponseObject, error)
	// Load a set of tasks
	// (POST /tasks/load)
	PostTasksLoad(ctx context.Context, request PostTasksLoadRequestObject) (PostTasksLoadResponseObject, error)
	// Spawn a new task
	// (POST /tasks/spawn)
	PostTasksSpawn(ctx context.Context, request PostTasksSpawnRequestObject) (PostTasksSpawnResponseObject, error)
	// Spawn a new task from specification
	// (POST /tasks/spawn_from_spec)
	PostTasksSpawnFromSpec(ctx context.Context, request PostTasksSpawnFromSpecRequestObject) (PostTasksSpawnFromSpecResponseObject, error)
	// Create a specification
	// (POST /tasks/specifications/create)
	PostTasksSpecificationsCreate(ctx context.Context, request PostTasksSpecificationsCreateRequestObject) (PostTasksSpecificationsCreateResponseObject, error)
	// Get specifications by id
	// (POST /tasks/specifications/get)
	PostTasksSpecificationsGet(ctx context.Context, request PostTasksSpecificationsGetRequestObject) (PostTasksSpecificationsGetResponseObject, error)
	// Get all specifications
	// (POST /tasks/specifications/get_all)
	PostTasksSpecificationsGetAll(ctx context.Context, request PostTasksSpecificationsGetAllRequestObject) (PostTasksSpecificationsGetAllResponseObject, error)
	// Remove a specification
	// (POST /tasks/specifications/remove)
	PostTasksSpecificationsRemove(ctx context.Context, request PostTasksSpecificationsRemoveRequestObject) (PostTasksSpecificationsRemoveResponseObject, error)
	// Create a type
	// (POST /tasks/specifications/types/create)
	PostTasksSpecificationsTypesCreate(ctx context.Context, request PostTasksSpecificationsTypesCreateRequestObject) (PostTasksSpecificationsTypesCreateResponseObject, error)
	// Get a type by id
	// (POST /tasks/specifications/types/get)
	PostTasksSpecificationsTypesGet(ctx context.Context, request PostTasksSpecificationsTypesGetRequestObject) (PostTasksSpecificationsTypesGetResponseObject, error)
	// Get all types
	// (POST /tasks/specifications/types/get_all)
	PostTasksSpecificationsTypesGetAll(ctx context.Context, request PostTasksSpecificationsTypesGetAllRequestObject) (PostTasksSpecificationsTypesGetAllResponseObject, error)
	// Remove a type
	// (POST /tasks/specifications/types/remove)
	PostTasksSpecificationsTypesRemove(ctx context.Context, request PostTasksSpecificationsTypesRemoveRequestObject) (PostTasksSpecificationsTypesRemoveResponseObject, error)
	// Update a record
	// (POST /tasks/update)
	PostTasksUpdate(ctx context.Context, request PostTasksUpdateRequestObject) (PostTasksUpdateResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostResourcesAllocate operation middleware
func (sh *strictHandler) PostResourcesAllocate(ctx echo.Context, params PostResourcesAllocateParams) error {
	var request PostResourcesAllocateRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesAllocate(ctx.Request().Context(), request.(PostResourcesAllocateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesAllocate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostResourcesAllocateResponseObject); ok {
		return validResponse.VisitPostResourcesAllocateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostResourcesDeallocate operation middleware
func (sh *strictHandler) PostResourcesDeallocate(ctx echo.Context) error {
	var request PostResourcesDeallocateRequestObject

	var body PostResourcesDeallocateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesDeallocate(ctx.Request().Context(), request.(PostResourcesDeallocateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesDeallocate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostResourcesDeallocateResponseObject); ok {
		return validResponse.VisitPostResourcesDeallocateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostResourcesInitialize operation middleware
func (sh *strictHandler) PostResourcesInitialize(ctx echo.Context) error {
	var request PostResourcesInitializeRequestObject

	var body PostResourcesInitializeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesInitialize(ctx.Request().Context(), request.(PostResourcesInitializeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesInitialize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostResourcesInitializeResponseObject); ok {
		return validResponse.VisitPostResourcesInitializeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostResourcesLoad operation middleware
func (sh *strictHandler) PostResourcesLoad(ctx echo.Context) error {
	var request PostResourcesLoadRequestObject

	var body PostResourcesLoadJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesLoad(ctx.Request().Context(), request.(PostResourcesLoadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesLoad")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostResourcesLoadResponseObject); ok {
		return validResponse.VisitPostResourcesLoadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksCount operation middleware
func (sh *strictHandler) PostTasksCount(ctx echo.Context) error {
	var request PostTasksCountRequestObject

	var body PostTasksCountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksCount(ctx.Request().Context(), request.(PostTasksCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksCount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksCountResponseObject); ok {
		return validResponse.VisitPostTasksCountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksFilter operation middleware
func (sh *strictHandler) PostTasksFilter(ctx echo.Context) error {
	var request PostTasksFilterRequestObject

	var body PostTasksFilterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksFilter(ctx.Request().Context(), request.(PostTasksFilterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksFilter")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksFilterResponseObject); ok {
		return validResponse.VisitPostTasksFilterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksLoad operation middleware
func (sh *strictHandler) PostTasksLoad(ctx echo.Context) error {
	var request PostTasksLoadRequestObject

	var body PostTasksLoadJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksLoad(ctx.Request().Context(), request.(PostTasksLoadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksLoad")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksLoadResponseObject); ok {
		return validResponse.VisitPostTasksLoadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpawn operation middleware
func (sh *strictHandler) PostTasksSpawn(ctx echo.Context) error {
	var request PostTasksSpawnRequestObject

	var body PostTasksSpawnJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpawn(ctx.Request().Context(), request.(PostTasksSpawnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpawn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpawnResponseObject); ok {
		return validResponse.VisitPostTasksSpawnResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpawnFromSpec operation middleware
func (sh *strictHandler) PostTasksSpawnFromSpec(ctx echo.Context) error {
	var request PostTasksSpawnFromSpecRequestObject

	var body PostTasksSpawnFromSpecJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpawnFromSpec(ctx.Request().Context(), request.(PostTasksSpawnFromSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpawnFromSpec")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpawnFromSpecResponseObject); ok {
		return validResponse.VisitPostTasksSpawnFromSpecResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpecificationsCreate operation middleware
func (sh *strictHandler) PostTasksSpecificationsCreate(ctx echo.Context) error {
	var request PostTasksSpecificationsCreateRequestObject

	var body PostTasksSpecificationsCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpecificationsCreate(ctx.Request().Context(), request.(PostTasksSpecificationsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpecificationsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpecificationsCreateResponseObject); ok {
		return validResponse.VisitPostTasksSpecificationsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpecificationsGet operation middleware
func (sh *strictHandler) PostTasksSpecificationsGet(ctx echo.Context) error {
	var request PostTasksSpecificationsGetRequestObject

	var body PostTasksSpecificationsGetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpecificationsGet(ctx.Request().Context(), request.(PostTasksSpecificationsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpecificationsGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpecificationsGetResponseObject); ok {
		return validResponse.VisitPostTasksSpecificationsGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpecificationsGetAll operation middleware
func (sh *strictHandler) PostTasksSpecificationsGetAll(ctx echo.Context) error {
	var request PostTasksSpecificationsGetAllRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpecificationsGetAll(ctx.Request().Context(), request.(PostTasksSpecificationsGetAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpecificationsGetAll")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpecificationsGetAllResponseObject); ok {
		return validResponse.VisitPostTasksSpecificationsGetAllResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpecificationsRemove operation middleware
func (sh *strictHandler) PostTasksSpecificationsRemove(ctx echo.Context) error {
	var request PostTasksSpecificationsRemoveRequestObject

	var body PostTasksSpecificationsRemoveJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpecificationsRemove(ctx.Request().Context(), request.(PostTasksSpecificationsRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpecificationsRemove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpecificationsRemoveResponseObject); ok {
		return validResponse.VisitPostTasksSpecificationsRemoveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpecificationsTypesCreate operation middleware
func (sh *strictHandler) PostTasksSpecificationsTypesCreate(ctx echo.Context) error {
	var request PostTasksSpecificationsTypesCreateRequestObject

	var body PostTasksSpecificationsTypesCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpecificationsTypesCreate(ctx.Request().Context(), request.(PostTasksSpecificationsTypesCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpecificationsTypesCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpecificationsTypesCreateResponseObject); ok {
		return validResponse.VisitPostTasksSpecificationsTypesCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpecificationsTypesGet operation middleware
func (sh *strictHandler) PostTasksSpecificationsTypesGet(ctx echo.Context) error {
	var request PostTasksSpecificationsTypesGetRequestObject

	var body PostTasksSpecificationsTypesGetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpecificationsTypesGet(ctx.Request().Context(), request.(PostTasksSpecificationsTypesGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpecificationsTypesGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpecificationsTypesGetResponseObject); ok {
		return validResponse.VisitPostTasksSpecificationsTypesGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpecificationsTypesGetAll operation middleware
func (sh *strictHandler) PostTasksSpecificationsTypesGetAll(ctx echo.Context) error {
	var request PostTasksSpecificationsTypesGetAllRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpecificationsTypesGetAll(ctx.Request().Context(), request.(PostTasksSpecificationsTypesGetAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpecificationsTypesGetAll")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpecificationsTypesGetAllResponseObject); ok {
		return validResponse.VisitPostTasksSpecificationsTypesGetAllResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpecificationsTypesRemove operation middleware
func (sh *strictHandler) PostTasksSpecificationsTypesRemove(ctx echo.Context) error {
	var request PostTasksSpecificationsTypesRemoveRequestObject

	var body PostTasksSpecificationsTypesRemoveJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpecificationsTypesRemove(ctx.Request().Context(), request.(PostTasksSpecificationsTypesRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpecificationsTypesRemove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpecificationsTypesRemoveResponseObject); ok {
		return validResponse.VisitPostTasksSpecificationsTypesRemoveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksUpdate operation middleware
func (sh *strictHandler) PostTasksUpdate(ctx echo.Context) error {
	var request PostTasksUpdateRequestObject

	var body PostTasksUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksUpdate(ctx.Request().Context(), request.(PostTasksUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksUpdateResponseObject); ok {
		return validResponse.VisitPostTasksUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa3W/bNhD/VwhuDxvgxd6Kvfgt/YTRbQ2abHvoiuAinRPWkqiSp6Ze4f99IKlvU5bk",
	"OpmD5qlqdDwe7/e7D578hQcyTmWCCWk+/8J1cIMx2McXSkllHlIlU1Qk0P45Rq3hGs1jiDpQIiUhEz7n",
	"p+wmiyFhCiGEqwgZGgWskJ9wWqfI51yTEsk132wmXOHHTCgM+fwdb8m9L+Xl1QcMiG8mfJEs5bNMaZ9Z",
	"odAkkoDMsyCM7R9bO5YqQSlYm/9HIhZUkxQJ4TUq8yoGvdINbd8rXPI5/25auWya+2v6FgOpwt9Br3zb",
	"6JVI/btoqWjkJudSkVvc3GbT4bGXIjLy1fbV65rVWw41z+Cg9Tgyl11fpkCEyifUwrfS51ntQ7tx2i3z",
	"Vrj2GiZViPa51yCjoSbvN0HLTAW4vb0IvbtrAsr81PsEUYb9VomQl2qKRbtMWySCBETiX5+TOqwcY0q3",
	"BecpBmIpgpIkzb3xMwYZmUTQR+uGohfVss2k6wBCjtK5eGMDGgk8UeA7tJB8Uj9AvrjXC09BY3gBenUG",
	"CmIkVNoDSrLsNd/oMLFrQ62ha3hu0218dqNd26a9duJs7j3+iwbkrfwMXu8XKvuss28nTkuvHYs3Pq+n",
	"GelRtClC7BztFjKjr1PRZpqzqFLce666tq0DJhDnaa+kSNsDIX72V6EE4iH5wCrIpX3Gthlo/q/3s6hg",
	"xc4gMTJdRnY2EVtFs746d2Jhum/9hbdadiWqkbFesXR4nNd4OXRRHxNzw23+7fLBIj+a9+Uh899x+aTL",
	"Hecp3JoATWWih/YL26XHqz0Pha1wR38Lkl1dloEHYShM5oDorLG6P6wm7fyNS8giGhyTu6ustb5ua9fB",
	"/xZ0s3g+ON72Txthd87Y1AK5eeV5phAIGSQhc90CMnMPUeIqIwzZrVSrZSRvDXlIkCmL/DUkJFcZOz1b",
	"mO4KlXaqfj6ZncwsdVNMIBV8zp/YP5kGgG7soacqLwB6ClEkAyBHDKmp0bEvQj7nZ1JTUTD0aSHebCfe",
	"mWjkc/4xQ7UuMvucQyyzhHjdQ6QynOS3Q1/G3rw30o791tZfZjPzTyATwsSaB2ka5YVs+kG7lqRSODhM",
	"N5MWCG9eG6lfR+63iyHu5uvZ6iWIKFOOPTqLY1Brc/HNnavZH6xEyMrUAAtxJGTPqwUOCNT0VIbre/Lq",
	"KYuEJiaX5ZGYCDEhsRSuRWxyY/OV8HtC7shQrvDoBlmUl7GBIFe3t0OAvHt2sH1fHESDUAS2gqg1+6FU",
	"8pz99E82mz1B9pe5H/74DfKhcmQ3HyIJ4UAm/GZEv4FAH0XWB5H+DXJtChDolZ4GtozuxN+0jvpZrdzu",
	"A36zNQrKCemuQ9ZmqZsJX5Yzwr41+TTR1+J5qFU0FneSHKrm4/hIYSFlyo4wNcu0SK4ZsGXlvJwileN7",
	"OJL7/ZEkB000F96B/fEmmT469RccS6YjKDbG3v+/0Dws/IFpLJ3XqDQ6hdtkAPB2SvEVyPf5sjb38Rzt",
	"4gZZY7JszgKOCiTZlXkLtwmGBydDn93N6c0xEsBayIAleGsdtoX+5VLJ+NK4dygPXioZnxv5u+FD75eR",
	"R4bcKUOYIUTTm03S1F7oaWBHWYOoU1/nJmD3wSDniEGgH1svmE8JB2NxjTQaiFd4uBvE3sPqwQjdFT2O",
	"DPlXSE3QNbtaMxHuxv4Somgf/E+jiN9H09Ty+wPongwOEEUtLHagoDCWn8Znw7du2cOJwyPDyflvRKa0",
	"H4/2rV0XZvGdFrDaF6yHX72o+G62C4p9SpfF4RusX212HGPStKj3Fq0S+71KV4H/fdWvut8fUPFyH8r7",
	"QNizclkMHsvXgcpXO1VmaTisQP3pBA+FwPiJ7YRXtg79gU6WalQ0fEWLAstisp3vfB9p+fg/LzomMMiH",
	"vm6hRvWp+OFGpiI+5zdEqZ5Ppyv3s5ITSMWJk5o/mc1mfPN+818AAAD//6Jlbk7jLwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
