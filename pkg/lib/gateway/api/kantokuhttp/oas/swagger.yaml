openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Kantoku API'
  description: Create and execute distributed workflows
servers:
  - url: https://kantoku.api.server:3000
paths:
  /tasks/spawn_from_spec:
    post:
      summary: Spawn a new task from specification
      requestBody:
        description: The specification of a task to be spawned
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecificationBasedTaskParameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSpawnResponse'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/spawn:
    post:
      summary: Spawn a new task
      requestBody:
        description: The specification of a task to be spawned
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskParameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSpawnResponse'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/restart:
    post:
      summary: Restart a failed task
      requestBody:
        description: A task id
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: string
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/load:
    post:
      summary: Load a set of tasks
      requestBody:
        description: A list of task identifiers
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/storage/settings:
    post:
      summary: Get storage settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStorageSettings'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/storage/exec:
    post:
      summary: Execute a command in the task storage
      requestBody:
        description: A command
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStorageCommand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/storage/insert:
    post:
      summary: Insert tasks in the database
      requestBody:
        description: An array of tasks to insert
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: OK
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/storage/delete:
    post:
      summary: Delete tasks with the given ids
      requestBody:
        description: An array of task ids to delete
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/storage/get_by_ids:
    post:
      summary: Get a list of tasks by their ids
      requestBody:
        description: An array of ids
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/storage/update_by_ids:
    post:
      summary: Update task properties by ids
      requestBody:
        description: Update info
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
                - properties
              properties:
                ids:
                  type: array
                  items:
                    type: string
                properties:
                  type: object
                  additionalProperties: true

      responses:
        '200':
          description: OK
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/storage/get_with_properties:
    post:
      summary: Get tasks with provided properties
      requestBody:
        description: properties
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - properties_to_values
              properties:
                properties_to_values:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnyValue'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/storage/update_with_properties:
    post:
      summary: Update tasks with provided properties
      requestBody:
        description: properties
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - properties_to_values
                - new_properties
              properties:
                properties_to_values:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnyValue'
                new_properties:
                  type: object
                  additionalProperties: true

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - modified
                properties:
                  modified:
                    type: integer
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/specifications/get:
    post:
      summary: Get specifications by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specification'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/specifications/get_all:
    post:
      summary: Get all specifications

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Specification'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/specifications/create:
    post:
      summary: Create a specification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specification'

      responses:
        '200':
          description: OK

        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/specifications/remove:
    post:
      summary: Remove a specification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string

      responses:
        '200':
          description: OK

        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/specifications/types/get:
    post:
      summary: Get a type by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeWithID'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/specifications/types/get_all:
    post:
      summary: Get all types

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeWithID'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/specifications/types/create:
    post:
      summary: Create a type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeWithID'

      responses:
        '200':
          description: OK

        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/specifications/types/remove:
    post:
      summary: Remove a type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string

      responses:
        '200':
          description: OK

        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/allocate:
    post:
      summary: Allocates N resources
      parameters:
        - name: amount
          required: true
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/deallocate:
    post:
      summary: Deallocate resources
      requestBody:
        description: A list of resource_db identifiers
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/initialize:
    post:
      summary: Initialize resources
      requestBody:
        description: A dictionary (ResourceID -> Value)
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ResourceInitializer'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resources/load:
    post:
      summary: Load resources
      requestBody:
        description: A list of resource_db identifiers
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '500':
          description: Failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    AnyValue:
      anyOf:
        - type: string
        - type: number
        - type: integer
        - type: boolean
        - type: array
          items: { }
        - type: object
      x-go-type: any
    TaskStorageCommand:
      type: object
      required:
        - operation
        - params
        - meta
      properties:
        operation:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/TaskStorageCommandParam'
        meta:
          type: object
          additionalProperties: true
    TaskStorageSettings:
      type: object
      required:
        - type
        - meta
      properties:
        type:
          type: string
        meta:
          type: object
          additionalProperties: true
    TaskSpawnResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    SpecificationBasedTaskParameters:
      type: object
      required:
        - parameters
        - specification
        - info
      properties:
        parameters:
          type: array
          items:
            type: string
        specification:
          type: string
        info:
          $ref: '#/components/schemas/TaskInfo'
    TaskParameters:
      type: object
      required:
        - inputs
        - outputs
        - info
      properties:
        inputs:
          type: array
          items:
            type: string
        outputs:
          type: array
          items:
            type: string
        info:
          $ref: '#/components/schemas/TaskInfo'
    Task:
      type: object
      required:
        - inputs
        - outputs
        - info
        - id
      properties:
        inputs:
          type: array
          items:
            type: string
        outputs:
          type: array
          items:
            type: string
        info:
          $ref: '#/components/schemas/TaskInfo'
        id:
          type: string
    TaskInfo:
      type: object
    TaskStorageCommandParam:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
        value:
          $ref: '#/components/schemas/AnyValue'
    InfoFilter:
      type: object
    RecordMask:
      type: object
      required:
        - operation
        - property_pattern
      properties:
        operation:
          type: string
        property_pattern:
          type: string
    RecordSorter:
      type: object
      required:
        - key
        - ordering
      properties:
        key:
          type: string
        ordering:
          type: string
    InfoCursor:
      type: object
      properties:
        skip:
          type: integer
        limit:
          type: integer
        masks:
          type: array
          items:
            $ref: '#/components/schemas/RecordMask'
        sort:
          type: array
          items:
            $ref: '#/components/schemas/RecordSorter'
        distinct:
          type: array
          items:
            type: string
    SpecificationResourceSet:
      type: object
      properties:
        naming:
          type: array
          items:
            type: object
            properties:
              index:
                type: integer
              name:
                type: string
            required:
              - index
              - name
        types:
          type: array
          items:
            type: object
            properties:
              index:
                type: integer
              type:
                $ref: '#/components/schemas/Type'
            required:
              - index
              - type
      required:
        - naming
        - types
    SpecificationIO:
      type: object
      properties:
        inputs:
          $ref: '#/components/schemas/SpecificationResourceSet'
        outputs:
          $ref: '#/components/schemas/SpecificationResourceSet'
      required:
        - inputs
        - outputs
    SpecificationExecutable:
      type: object
      properties:
        type:
          type: string
        data:
          type: object
      required:
        - type
        - data
    Specification:
      type: object
      properties:
        id:
          type: string
        io:
          $ref: '#/components/schemas/SpecificationIO'
        executable:
          $ref: '#/components/schemas/SpecificationExecutable'
        meta:
          type: object
      required:
        - id
        - io
        - executable
        - meta
    Type:
      type: object
      properties:
        name:
          type: string
        sub_types:
          type: object
          properties:
            default:
              $ref: '#/components/schemas/Type'
          additionalProperties:
            $ref: '#/components/schemas/Type'
      required:
        - name
        - sub_types
    TypeWithID:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/Type'
      required:
        - id
        - type
    Resource:
      type: object
      required:
        - id
        - status
        - value
      properties:
        id:
          type: string
        status:
          type: string
        value:
          type: string
    ResourceInitializer:
      type: object
      required:
        - id
        - value
      properties:
        id:
          type: string
        value:
          type: string
    Error:
      type: object
      required:
        - message
        - type
      properties:
        message:
          description: A human readable error message
          type: string