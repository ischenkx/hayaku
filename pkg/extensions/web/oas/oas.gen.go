// Package oas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package oas

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Error defines model for Error.
type Error struct {
	// Message A human readable error message
	Message string `json:"message"`
}

// InfoCursor defines model for InfoCursor.
type InfoCursor struct {
	Distinct *[]string       `json:"distinct,omitempty"`
	Limit    *int            `json:"limit,omitempty"`
	Masks    *[]RecordMask   `json:"masks,omitempty"`
	Skip     *int            `json:"skip,omitempty"`
	Sort     *[]RecordSorter `json:"sort,omitempty"`
}

// InfoFilter defines model for InfoFilter.
type InfoFilter = map[string]interface{}

// PropertySubTree defines model for PropertySubTree.
type PropertySubTree struct {
	Key   string         `json:"key"`
	Value TaskProperties `json:"value"`
}

// RecordMask defines model for RecordMask.
type RecordMask struct {
	Operation       string `json:"operation"`
	PropertyPattern string `json:"property_pattern"`
}

// RecordSorter defines model for RecordSorter.
type RecordSorter struct {
	Key      string `json:"key"`
	Ordering string `json:"ordering"`
}

// Resource defines model for Resource.
type Resource struct {
	Id     string `json:"id"`
	Status string `json:"status"`
	Value  string `json:"value"`
}

// ResourceInitializer defines model for ResourceInitializer.
type ResourceInitializer struct {
	Id    string `json:"id"`
	Value string `json:"value"`
}

// Task defines model for Task.
type Task struct {
	Id         string         `json:"id"`
	Inputs     []string       `json:"inputs"`
	Outputs    []string       `json:"outputs"`
	Properties TaskProperties `json:"properties"`
}

// TaskInfo defines model for TaskInfo.
type TaskInfo = map[string]interface{}

// TaskProperties defines model for TaskProperties.
type TaskProperties struct {
	Data map[string]interface{} `json:"data"`
	Sub  []PropertySubTree      `json:"sub"`
}

// TaskSpawnResponse defines model for TaskSpawnResponse.
type TaskSpawnResponse struct {
	Id string `json:"id"`
}

// TaskSpecification defines model for TaskSpecification.
type TaskSpecification struct {
	Inputs     []string       `json:"inputs"`
	Outputs    []string       `json:"outputs"`
	Properties TaskProperties `json:"properties"`
}

// PostResourcesAllocateParams defines parameters for PostResourcesAllocate.
type PostResourcesAllocateParams struct {
	Amount int `form:"amount" json:"amount"`
}

// PostResourcesDeallocateJSONBody defines parameters for PostResourcesDeallocate.
type PostResourcesDeallocateJSONBody = []string

// PostResourcesInitializeJSONBody defines parameters for PostResourcesInitialize.
type PostResourcesInitializeJSONBody = []ResourceInitializer

// PostResourcesLoadJSONBody defines parameters for PostResourcesLoad.
type PostResourcesLoadJSONBody = []string

// PostTasksInfoCountJSONBody defines parameters for PostTasksInfoCount.
type PostTasksInfoCountJSONBody struct {
	Cursor *InfoCursor `json:"cursor,omitempty"`
	Filter *InfoFilter `json:"filter,omitempty"`
}

// PostTasksInfoEraseJSONBody defines parameters for PostTasksInfoErase.
type PostTasksInfoEraseJSONBody struct {
	Filter *InfoFilter `json:"filter,omitempty"`
}

// PostTasksInfoLoadJSONBody defines parameters for PostTasksInfoLoad.
type PostTasksInfoLoadJSONBody struct {
	Cursor *InfoCursor `json:"cursor,omitempty"`
	Filter *InfoFilter `json:"filter,omitempty"`
}

// PostTasksInfoUpdateJSONBody defines parameters for PostTasksInfoUpdate.
type PostTasksInfoUpdateJSONBody struct {
	Filter InfoFilter `json:"filter"`
	Update TaskInfo   `json:"update"`
	Upsert *TaskInfo  `json:"upsert,omitempty"`
}

// PostTasksLoadJSONBody defines parameters for PostTasksLoad.
type PostTasksLoadJSONBody = []string

// PostResourcesDeallocateJSONRequestBody defines body for PostResourcesDeallocate for application/json ContentType.
type PostResourcesDeallocateJSONRequestBody = PostResourcesDeallocateJSONBody

// PostResourcesInitializeJSONRequestBody defines body for PostResourcesInitialize for application/json ContentType.
type PostResourcesInitializeJSONRequestBody = PostResourcesInitializeJSONBody

// PostResourcesLoadJSONRequestBody defines body for PostResourcesLoad for application/json ContentType.
type PostResourcesLoadJSONRequestBody = PostResourcesLoadJSONBody

// PostTasksInfoCountJSONRequestBody defines body for PostTasksInfoCount for application/json ContentType.
type PostTasksInfoCountJSONRequestBody PostTasksInfoCountJSONBody

// PostTasksInfoEraseJSONRequestBody defines body for PostTasksInfoErase for application/json ContentType.
type PostTasksInfoEraseJSONRequestBody PostTasksInfoEraseJSONBody

// PostTasksInfoInsertJSONRequestBody defines body for PostTasksInfoInsert for application/json ContentType.
type PostTasksInfoInsertJSONRequestBody = TaskInfo

// PostTasksInfoLoadJSONRequestBody defines body for PostTasksInfoLoad for application/json ContentType.
type PostTasksInfoLoadJSONRequestBody PostTasksInfoLoadJSONBody

// PostTasksInfoUpdateJSONRequestBody defines body for PostTasksInfoUpdate for application/json ContentType.
type PostTasksInfoUpdateJSONRequestBody PostTasksInfoUpdateJSONBody

// PostTasksLoadJSONRequestBody defines body for PostTasksLoad for application/json ContentType.
type PostTasksLoadJSONRequestBody = PostTasksLoadJSONBody

// PostTasksSpawnJSONRequestBody defines body for PostTasksSpawn for application/json ContentType.
type PostTasksSpawnJSONRequestBody = TaskSpecification

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostResourcesAllocate request
	PostResourcesAllocate(ctx context.Context, params *PostResourcesAllocateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResourcesDeallocateWithBody request with any body
	PostResourcesDeallocateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResourcesDeallocate(ctx context.Context, body PostResourcesDeallocateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResourcesInitializeWithBody request with any body
	PostResourcesInitializeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResourcesInitialize(ctx context.Context, body PostResourcesInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostResourcesLoadWithBody request with any body
	PostResourcesLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostResourcesLoad(ctx context.Context, body PostResourcesLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksInfoCountWithBody request with any body
	PostTasksInfoCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksInfoCount(ctx context.Context, body PostTasksInfoCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksInfoEraseWithBody request with any body
	PostTasksInfoEraseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksInfoErase(ctx context.Context, body PostTasksInfoEraseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksInfoInsertWithBody request with any body
	PostTasksInfoInsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksInfoInsert(ctx context.Context, body PostTasksInfoInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksInfoLoadWithBody request with any body
	PostTasksInfoLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksInfoLoad(ctx context.Context, body PostTasksInfoLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksInfoUpdateWithBody request with any body
	PostTasksInfoUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksInfoUpdate(ctx context.Context, body PostTasksInfoUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksLoadWithBody request with any body
	PostTasksLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksLoad(ctx context.Context, body PostTasksLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTasksSpawnWithBody request with any body
	PostTasksSpawnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTasksSpawn(ctx context.Context, body PostTasksSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostResourcesAllocate(ctx context.Context, params *PostResourcesAllocateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesAllocateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesDeallocateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesDeallocateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesDeallocate(ctx context.Context, body PostResourcesDeallocateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesDeallocateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesInitializeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesInitializeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesInitialize(ctx context.Context, body PostResourcesInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesInitializeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesLoadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostResourcesLoad(ctx context.Context, body PostResourcesLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostResourcesLoadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoCountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoCount(ctx context.Context, body PostTasksInfoCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoCountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoEraseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoEraseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoErase(ctx context.Context, body PostTasksInfoEraseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoEraseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoInsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoInsertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoInsert(ctx context.Context, body PostTasksInfoInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoInsertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoLoadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoLoad(ctx context.Context, body PostTasksInfoLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoLoadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksInfoUpdate(ctx context.Context, body PostTasksInfoUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksInfoUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksLoadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksLoad(ctx context.Context, body PostTasksLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksLoadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpawnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpawnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTasksSpawn(ctx context.Context, body PostTasksSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTasksSpawnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostResourcesAllocateRequest generates requests for PostResourcesAllocate
func NewPostResourcesAllocateRequest(server string, params *PostResourcesAllocateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/allocate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostResourcesDeallocateRequest calls the generic PostResourcesDeallocate builder with application/json body
func NewPostResourcesDeallocateRequest(server string, body PostResourcesDeallocateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResourcesDeallocateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostResourcesDeallocateRequestWithBody generates requests for PostResourcesDeallocate with any type of body
func NewPostResourcesDeallocateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/deallocate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostResourcesInitializeRequest calls the generic PostResourcesInitialize builder with application/json body
func NewPostResourcesInitializeRequest(server string, body PostResourcesInitializeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResourcesInitializeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostResourcesInitializeRequestWithBody generates requests for PostResourcesInitialize with any type of body
func NewPostResourcesInitializeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/initialize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostResourcesLoadRequest calls the generic PostResourcesLoad builder with application/json body
func NewPostResourcesLoadRequest(server string, body PostResourcesLoadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostResourcesLoadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostResourcesLoadRequestWithBody generates requests for PostResourcesLoad with any type of body
func NewPostResourcesLoadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/load")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksInfoCountRequest calls the generic PostTasksInfoCount builder with application/json body
func NewPostTasksInfoCountRequest(server string, body PostTasksInfoCountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksInfoCountRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksInfoCountRequestWithBody generates requests for PostTasksInfoCount with any type of body
func NewPostTasksInfoCountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/info/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksInfoEraseRequest calls the generic PostTasksInfoErase builder with application/json body
func NewPostTasksInfoEraseRequest(server string, body PostTasksInfoEraseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksInfoEraseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksInfoEraseRequestWithBody generates requests for PostTasksInfoErase with any type of body
func NewPostTasksInfoEraseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/info/erase")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksInfoInsertRequest calls the generic PostTasksInfoInsert builder with application/json body
func NewPostTasksInfoInsertRequest(server string, body PostTasksInfoInsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksInfoInsertRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksInfoInsertRequestWithBody generates requests for PostTasksInfoInsert with any type of body
func NewPostTasksInfoInsertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/info/insert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksInfoLoadRequest calls the generic PostTasksInfoLoad builder with application/json body
func NewPostTasksInfoLoadRequest(server string, body PostTasksInfoLoadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksInfoLoadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksInfoLoadRequestWithBody generates requests for PostTasksInfoLoad with any type of body
func NewPostTasksInfoLoadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/info/load")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksInfoUpdateRequest calls the generic PostTasksInfoUpdate builder with application/json body
func NewPostTasksInfoUpdateRequest(server string, body PostTasksInfoUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksInfoUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksInfoUpdateRequestWithBody generates requests for PostTasksInfoUpdate with any type of body
func NewPostTasksInfoUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/info/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksLoadRequest calls the generic PostTasksLoad builder with application/json body
func NewPostTasksLoadRequest(server string, body PostTasksLoadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksLoadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksLoadRequestWithBody generates requests for PostTasksLoad with any type of body
func NewPostTasksLoadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/load")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTasksSpawnRequest calls the generic PostTasksSpawn builder with application/json body
func NewPostTasksSpawnRequest(server string, body PostTasksSpawnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTasksSpawnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTasksSpawnRequestWithBody generates requests for PostTasksSpawn with any type of body
func NewPostTasksSpawnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/spawn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostResourcesAllocateWithResponse request
	PostResourcesAllocateWithResponse(ctx context.Context, params *PostResourcesAllocateParams, reqEditors ...RequestEditorFn) (*PostResourcesAllocateResponse, error)

	// PostResourcesDeallocateWithBodyWithResponse request with any body
	PostResourcesDeallocateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesDeallocateResponse, error)

	PostResourcesDeallocateWithResponse(ctx context.Context, body PostResourcesDeallocateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesDeallocateResponse, error)

	// PostResourcesInitializeWithBodyWithResponse request with any body
	PostResourcesInitializeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesInitializeResponse, error)

	PostResourcesInitializeWithResponse(ctx context.Context, body PostResourcesInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesInitializeResponse, error)

	// PostResourcesLoadWithBodyWithResponse request with any body
	PostResourcesLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesLoadResponse, error)

	PostResourcesLoadWithResponse(ctx context.Context, body PostResourcesLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesLoadResponse, error)

	// PostTasksInfoCountWithBodyWithResponse request with any body
	PostTasksInfoCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoCountResponse, error)

	PostTasksInfoCountWithResponse(ctx context.Context, body PostTasksInfoCountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoCountResponse, error)

	// PostTasksInfoEraseWithBodyWithResponse request with any body
	PostTasksInfoEraseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoEraseResponse, error)

	PostTasksInfoEraseWithResponse(ctx context.Context, body PostTasksInfoEraseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoEraseResponse, error)

	// PostTasksInfoInsertWithBodyWithResponse request with any body
	PostTasksInfoInsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoInsertResponse, error)

	PostTasksInfoInsertWithResponse(ctx context.Context, body PostTasksInfoInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoInsertResponse, error)

	// PostTasksInfoLoadWithBodyWithResponse request with any body
	PostTasksInfoLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoLoadResponse, error)

	PostTasksInfoLoadWithResponse(ctx context.Context, body PostTasksInfoLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoLoadResponse, error)

	// PostTasksInfoUpdateWithBodyWithResponse request with any body
	PostTasksInfoUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoUpdateResponse, error)

	PostTasksInfoUpdateWithResponse(ctx context.Context, body PostTasksInfoUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoUpdateResponse, error)

	// PostTasksLoadWithBodyWithResponse request with any body
	PostTasksLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksLoadResponse, error)

	PostTasksLoadWithResponse(ctx context.Context, body PostTasksLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksLoadResponse, error)

	// PostTasksSpawnWithBodyWithResponse request with any body
	PostTasksSpawnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpawnResponse, error)

	PostTasksSpawnWithResponse(ctx context.Context, body PostTasksSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpawnResponse, error)
}

type PostResourcesAllocateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostResourcesAllocateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesAllocateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResourcesDeallocateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostResourcesDeallocateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesDeallocateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResourcesInitializeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostResourcesInitializeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesInitializeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostResourcesLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Resource
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostResourcesLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResourcesLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksInfoCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksInfoCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksInfoCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksInfoEraseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksInfoEraseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksInfoEraseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksInfoInsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksInfoInsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksInfoInsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksInfoLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaskInfo
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksInfoLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksInfoLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksInfoUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksInfoUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksInfoUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTasksSpawnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskSpawnResponse
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostTasksSpawnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTasksSpawnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostResourcesAllocateWithResponse request returning *PostResourcesAllocateResponse
func (c *ClientWithResponses) PostResourcesAllocateWithResponse(ctx context.Context, params *PostResourcesAllocateParams, reqEditors ...RequestEditorFn) (*PostResourcesAllocateResponse, error) {
	rsp, err := c.PostResourcesAllocate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesAllocateResponse(rsp)
}

// PostResourcesDeallocateWithBodyWithResponse request with arbitrary body returning *PostResourcesDeallocateResponse
func (c *ClientWithResponses) PostResourcesDeallocateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesDeallocateResponse, error) {
	rsp, err := c.PostResourcesDeallocateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesDeallocateResponse(rsp)
}

func (c *ClientWithResponses) PostResourcesDeallocateWithResponse(ctx context.Context, body PostResourcesDeallocateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesDeallocateResponse, error) {
	rsp, err := c.PostResourcesDeallocate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesDeallocateResponse(rsp)
}

// PostResourcesInitializeWithBodyWithResponse request with arbitrary body returning *PostResourcesInitializeResponse
func (c *ClientWithResponses) PostResourcesInitializeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesInitializeResponse, error) {
	rsp, err := c.PostResourcesInitializeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesInitializeResponse(rsp)
}

func (c *ClientWithResponses) PostResourcesInitializeWithResponse(ctx context.Context, body PostResourcesInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesInitializeResponse, error) {
	rsp, err := c.PostResourcesInitialize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesInitializeResponse(rsp)
}

// PostResourcesLoadWithBodyWithResponse request with arbitrary body returning *PostResourcesLoadResponse
func (c *ClientWithResponses) PostResourcesLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostResourcesLoadResponse, error) {
	rsp, err := c.PostResourcesLoadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesLoadResponse(rsp)
}

func (c *ClientWithResponses) PostResourcesLoadWithResponse(ctx context.Context, body PostResourcesLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostResourcesLoadResponse, error) {
	rsp, err := c.PostResourcesLoad(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResourcesLoadResponse(rsp)
}

// PostTasksInfoCountWithBodyWithResponse request with arbitrary body returning *PostTasksInfoCountResponse
func (c *ClientWithResponses) PostTasksInfoCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoCountResponse, error) {
	rsp, err := c.PostTasksInfoCountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoCountResponse(rsp)
}

func (c *ClientWithResponses) PostTasksInfoCountWithResponse(ctx context.Context, body PostTasksInfoCountJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoCountResponse, error) {
	rsp, err := c.PostTasksInfoCount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoCountResponse(rsp)
}

// PostTasksInfoEraseWithBodyWithResponse request with arbitrary body returning *PostTasksInfoEraseResponse
func (c *ClientWithResponses) PostTasksInfoEraseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoEraseResponse, error) {
	rsp, err := c.PostTasksInfoEraseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoEraseResponse(rsp)
}

func (c *ClientWithResponses) PostTasksInfoEraseWithResponse(ctx context.Context, body PostTasksInfoEraseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoEraseResponse, error) {
	rsp, err := c.PostTasksInfoErase(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoEraseResponse(rsp)
}

// PostTasksInfoInsertWithBodyWithResponse request with arbitrary body returning *PostTasksInfoInsertResponse
func (c *ClientWithResponses) PostTasksInfoInsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoInsertResponse, error) {
	rsp, err := c.PostTasksInfoInsertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoInsertResponse(rsp)
}

func (c *ClientWithResponses) PostTasksInfoInsertWithResponse(ctx context.Context, body PostTasksInfoInsertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoInsertResponse, error) {
	rsp, err := c.PostTasksInfoInsert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoInsertResponse(rsp)
}

// PostTasksInfoLoadWithBodyWithResponse request with arbitrary body returning *PostTasksInfoLoadResponse
func (c *ClientWithResponses) PostTasksInfoLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoLoadResponse, error) {
	rsp, err := c.PostTasksInfoLoadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoLoadResponse(rsp)
}

func (c *ClientWithResponses) PostTasksInfoLoadWithResponse(ctx context.Context, body PostTasksInfoLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoLoadResponse, error) {
	rsp, err := c.PostTasksInfoLoad(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoLoadResponse(rsp)
}

// PostTasksInfoUpdateWithBodyWithResponse request with arbitrary body returning *PostTasksInfoUpdateResponse
func (c *ClientWithResponses) PostTasksInfoUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksInfoUpdateResponse, error) {
	rsp, err := c.PostTasksInfoUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoUpdateResponse(rsp)
}

func (c *ClientWithResponses) PostTasksInfoUpdateWithResponse(ctx context.Context, body PostTasksInfoUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksInfoUpdateResponse, error) {
	rsp, err := c.PostTasksInfoUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksInfoUpdateResponse(rsp)
}

// PostTasksLoadWithBodyWithResponse request with arbitrary body returning *PostTasksLoadResponse
func (c *ClientWithResponses) PostTasksLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksLoadResponse, error) {
	rsp, err := c.PostTasksLoadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksLoadResponse(rsp)
}

func (c *ClientWithResponses) PostTasksLoadWithResponse(ctx context.Context, body PostTasksLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksLoadResponse, error) {
	rsp, err := c.PostTasksLoad(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksLoadResponse(rsp)
}

// PostTasksSpawnWithBodyWithResponse request with arbitrary body returning *PostTasksSpawnResponse
func (c *ClientWithResponses) PostTasksSpawnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTasksSpawnResponse, error) {
	rsp, err := c.PostTasksSpawnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpawnResponse(rsp)
}

func (c *ClientWithResponses) PostTasksSpawnWithResponse(ctx context.Context, body PostTasksSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTasksSpawnResponse, error) {
	rsp, err := c.PostTasksSpawn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTasksSpawnResponse(rsp)
}

// ParsePostResourcesAllocateResponse parses an HTTP response from a PostResourcesAllocateWithResponse call
func ParsePostResourcesAllocateResponse(rsp *http.Response) (*PostResourcesAllocateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesAllocateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostResourcesDeallocateResponse parses an HTTP response from a PostResourcesDeallocateWithResponse call
func ParsePostResourcesDeallocateResponse(rsp *http.Response) (*PostResourcesDeallocateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesDeallocateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostResourcesInitializeResponse parses an HTTP response from a PostResourcesInitializeWithResponse call
func ParsePostResourcesInitializeResponse(rsp *http.Response) (*PostResourcesInitializeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesInitializeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostResourcesLoadResponse parses an HTTP response from a PostResourcesLoadWithResponse call
func ParsePostResourcesLoadResponse(rsp *http.Response) (*PostResourcesLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResourcesLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Resource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksInfoCountResponse parses an HTTP response from a PostTasksInfoCountWithResponse call
func ParsePostTasksInfoCountResponse(rsp *http.Response) (*PostTasksInfoCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksInfoCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksInfoEraseResponse parses an HTTP response from a PostTasksInfoEraseWithResponse call
func ParsePostTasksInfoEraseResponse(rsp *http.Response) (*PostTasksInfoEraseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksInfoEraseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksInfoInsertResponse parses an HTTP response from a PostTasksInfoInsertWithResponse call
func ParsePostTasksInfoInsertResponse(rsp *http.Response) (*PostTasksInfoInsertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksInfoInsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksInfoLoadResponse parses an HTTP response from a PostTasksInfoLoadWithResponse call
func ParsePostTasksInfoLoadResponse(rsp *http.Response) (*PostTasksInfoLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksInfoLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaskInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksInfoUpdateResponse parses an HTTP response from a PostTasksInfoUpdateWithResponse call
func ParsePostTasksInfoUpdateResponse(rsp *http.Response) (*PostTasksInfoUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksInfoUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksLoadResponse parses an HTTP response from a PostTasksLoadWithResponse call
func ParsePostTasksLoadResponse(rsp *http.Response) (*PostTasksLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTasksSpawnResponse parses an HTTP response from a PostTasksSpawnWithResponse call
func ParsePostTasksSpawnResponse(rsp *http.Response) (*PostTasksSpawnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTasksSpawnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskSpawnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Allocates N resources
	// (POST /resources/allocate)
	PostResourcesAllocate(ctx echo.Context, params PostResourcesAllocateParams) error
	// Deallocate resources
	// (POST /resources/deallocate)
	PostResourcesDeallocate(ctx echo.Context) error
	// Initialize resources
	// (POST /resources/initialize)
	PostResourcesInitialize(ctx echo.Context) error
	// Load resources
	// (POST /resources/load)
	PostResourcesLoad(ctx echo.Context) error
	// Count records using a filter
	// (POST /tasks/info/count)
	PostTasksInfoCount(ctx echo.Context) error
	// Delete records by a filter
	// (POST /tasks/info/erase)
	PostTasksInfoErase(ctx echo.Context) error
	// Insert a record
	// (POST /tasks/info/insert)
	PostTasksInfoInsert(ctx echo.Context) error
	// Load records using a filter
	// (POST /tasks/info/load)
	PostTasksInfoLoad(ctx echo.Context) error
	// Update a record
	// (POST /tasks/info/update)
	PostTasksInfoUpdate(ctx echo.Context) error
	// Load a set of tasks
	// (POST /tasks/load)
	PostTasksLoad(ctx echo.Context) error
	// Spawn a new task
	// (POST /tasks/spawn)
	PostTasksSpawn(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostResourcesAllocate converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourcesAllocate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostResourcesAllocateParams
	// ------------- Required query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, true, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostResourcesAllocate(ctx, params)
	return err
}

// PostResourcesDeallocate converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourcesDeallocate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostResourcesDeallocate(ctx)
	return err
}

// PostResourcesInitialize converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourcesInitialize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostResourcesInitialize(ctx)
	return err
}

// PostResourcesLoad converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourcesLoad(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostResourcesLoad(ctx)
	return err
}

// PostTasksInfoCount converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksInfoCount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksInfoCount(ctx)
	return err
}

// PostTasksInfoErase converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksInfoErase(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksInfoErase(ctx)
	return err
}

// PostTasksInfoInsert converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksInfoInsert(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksInfoInsert(ctx)
	return err
}

// PostTasksInfoLoad converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksInfoLoad(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksInfoLoad(ctx)
	return err
}

// PostTasksInfoUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksInfoUpdate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksInfoUpdate(ctx)
	return err
}

// PostTasksLoad converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksLoad(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksLoad(ctx)
	return err
}

// PostTasksSpawn converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasksSpawn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasksSpawn(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/resources/allocate", wrapper.PostResourcesAllocate)
	router.POST(baseURL+"/resources/deallocate", wrapper.PostResourcesDeallocate)
	router.POST(baseURL+"/resources/initialize", wrapper.PostResourcesInitialize)
	router.POST(baseURL+"/resources/load", wrapper.PostResourcesLoad)
	router.POST(baseURL+"/tasks/info/count", wrapper.PostTasksInfoCount)
	router.POST(baseURL+"/tasks/info/erase", wrapper.PostTasksInfoErase)
	router.POST(baseURL+"/tasks/info/insert", wrapper.PostTasksInfoInsert)
	router.POST(baseURL+"/tasks/info/load", wrapper.PostTasksInfoLoad)
	router.POST(baseURL+"/tasks/info/update", wrapper.PostTasksInfoUpdate)
	router.POST(baseURL+"/tasks/load", wrapper.PostTasksLoad)
	router.POST(baseURL+"/tasks/spawn", wrapper.PostTasksSpawn)

}

type PostResourcesAllocateRequestObject struct {
	Params PostResourcesAllocateParams
}

type PostResourcesAllocateResponseObject interface {
	VisitPostResourcesAllocateResponse(w http.ResponseWriter) error
}

type PostResourcesAllocate200JSONResponse []string

func (response PostResourcesAllocate200JSONResponse) VisitPostResourcesAllocateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesAllocate500JSONResponse Error

func (response PostResourcesAllocate500JSONResponse) VisitPostResourcesAllocateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesDeallocateRequestObject struct {
	Body *PostResourcesDeallocateJSONRequestBody
}

type PostResourcesDeallocateResponseObject interface {
	VisitPostResourcesDeallocateResponse(w http.ResponseWriter) error
}

type PostResourcesDeallocate200JSONResponse map[string]interface{}

func (response PostResourcesDeallocate200JSONResponse) VisitPostResourcesDeallocateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesDeallocate500JSONResponse Error

func (response PostResourcesDeallocate500JSONResponse) VisitPostResourcesDeallocateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesInitializeRequestObject struct {
	Body *PostResourcesInitializeJSONRequestBody
}

type PostResourcesInitializeResponseObject interface {
	VisitPostResourcesInitializeResponse(w http.ResponseWriter) error
}

type PostResourcesInitialize200JSONResponse map[string]interface{}

func (response PostResourcesInitialize200JSONResponse) VisitPostResourcesInitializeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesInitialize500JSONResponse Error

func (response PostResourcesInitialize500JSONResponse) VisitPostResourcesInitializeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesLoadRequestObject struct {
	Body *PostResourcesLoadJSONRequestBody
}

type PostResourcesLoadResponseObject interface {
	VisitPostResourcesLoadResponse(w http.ResponseWriter) error
}

type PostResourcesLoad200JSONResponse []Resource

func (response PostResourcesLoad200JSONResponse) VisitPostResourcesLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostResourcesLoad500JSONResponse Error

func (response PostResourcesLoad500JSONResponse) VisitPostResourcesLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoCountRequestObject struct {
	Body *PostTasksInfoCountJSONRequestBody
}

type PostTasksInfoCountResponseObject interface {
	VisitPostTasksInfoCountResponse(w http.ResponseWriter) error
}

type PostTasksInfoCount200JSONResponse int

func (response PostTasksInfoCount200JSONResponse) VisitPostTasksInfoCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoCount500JSONResponse Error

func (response PostTasksInfoCount500JSONResponse) VisitPostTasksInfoCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoEraseRequestObject struct {
	Body *PostTasksInfoEraseJSONRequestBody
}

type PostTasksInfoEraseResponseObject interface {
	VisitPostTasksInfoEraseResponse(w http.ResponseWriter) error
}

type PostTasksInfoErase200JSONResponse map[string]interface{}

func (response PostTasksInfoErase200JSONResponse) VisitPostTasksInfoEraseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoErase500JSONResponse Error

func (response PostTasksInfoErase500JSONResponse) VisitPostTasksInfoEraseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoInsertRequestObject struct {
	Body *PostTasksInfoInsertJSONRequestBody
}

type PostTasksInfoInsertResponseObject interface {
	VisitPostTasksInfoInsertResponse(w http.ResponseWriter) error
}

type PostTasksInfoInsert200JSONResponse map[string]interface{}

func (response PostTasksInfoInsert200JSONResponse) VisitPostTasksInfoInsertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoInsert500JSONResponse Error

func (response PostTasksInfoInsert500JSONResponse) VisitPostTasksInfoInsertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoLoadRequestObject struct {
	Body *PostTasksInfoLoadJSONRequestBody
}

type PostTasksInfoLoadResponseObject interface {
	VisitPostTasksInfoLoadResponse(w http.ResponseWriter) error
}

type PostTasksInfoLoad200JSONResponse []TaskInfo

func (response PostTasksInfoLoad200JSONResponse) VisitPostTasksInfoLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoLoad500JSONResponse Error

func (response PostTasksInfoLoad500JSONResponse) VisitPostTasksInfoLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoUpdateRequestObject struct {
	Body *PostTasksInfoUpdateJSONRequestBody
}

type PostTasksInfoUpdateResponseObject interface {
	VisitPostTasksInfoUpdateResponse(w http.ResponseWriter) error
}

type PostTasksInfoUpdate200JSONResponse map[string]interface{}

func (response PostTasksInfoUpdate200JSONResponse) VisitPostTasksInfoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksInfoUpdate500JSONResponse Error

func (response PostTasksInfoUpdate500JSONResponse) VisitPostTasksInfoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksLoadRequestObject struct {
	Body *PostTasksLoadJSONRequestBody
}

type PostTasksLoadResponseObject interface {
	VisitPostTasksLoadResponse(w http.ResponseWriter) error
}

type PostTasksLoad200JSONResponse []Task

func (response PostTasksLoad200JSONResponse) VisitPostTasksLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksLoad500JSONResponse Error

func (response PostTasksLoad500JSONResponse) VisitPostTasksLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpawnRequestObject struct {
	Body *PostTasksSpawnJSONRequestBody
}

type PostTasksSpawnResponseObject interface {
	VisitPostTasksSpawnResponse(w http.ResponseWriter) error
}

type PostTasksSpawn200JSONResponse TaskSpawnResponse

func (response PostTasksSpawn200JSONResponse) VisitPostTasksSpawnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTasksSpawn500JSONResponse Error

func (response PostTasksSpawn500JSONResponse) VisitPostTasksSpawnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Allocates N resources
	// (POST /resources/allocate)
	PostResourcesAllocate(ctx context.Context, request PostResourcesAllocateRequestObject) (PostResourcesAllocateResponseObject, error)
	// Deallocate resources
	// (POST /resources/deallocate)
	PostResourcesDeallocate(ctx context.Context, request PostResourcesDeallocateRequestObject) (PostResourcesDeallocateResponseObject, error)
	// Initialize resources
	// (POST /resources/initialize)
	PostResourcesInitialize(ctx context.Context, request PostResourcesInitializeRequestObject) (PostResourcesInitializeResponseObject, error)
	// Load resources
	// (POST /resources/load)
	PostResourcesLoad(ctx context.Context, request PostResourcesLoadRequestObject) (PostResourcesLoadResponseObject, error)
	// Count records using a filter
	// (POST /tasks/info/count)
	PostTasksInfoCount(ctx context.Context, request PostTasksInfoCountRequestObject) (PostTasksInfoCountResponseObject, error)
	// Delete records by a filter
	// (POST /tasks/info/erase)
	PostTasksInfoErase(ctx context.Context, request PostTasksInfoEraseRequestObject) (PostTasksInfoEraseResponseObject, error)
	// Insert a record
	// (POST /tasks/info/insert)
	PostTasksInfoInsert(ctx context.Context, request PostTasksInfoInsertRequestObject) (PostTasksInfoInsertResponseObject, error)
	// Load records using a filter
	// (POST /tasks/info/load)
	PostTasksInfoLoad(ctx context.Context, request PostTasksInfoLoadRequestObject) (PostTasksInfoLoadResponseObject, error)
	// Update a record
	// (POST /tasks/info/update)
	PostTasksInfoUpdate(ctx context.Context, request PostTasksInfoUpdateRequestObject) (PostTasksInfoUpdateResponseObject, error)
	// Load a set of tasks
	// (POST /tasks/load)
	PostTasksLoad(ctx context.Context, request PostTasksLoadRequestObject) (PostTasksLoadResponseObject, error)
	// Spawn a new task
	// (POST /tasks/spawn)
	PostTasksSpawn(ctx context.Context, request PostTasksSpawnRequestObject) (PostTasksSpawnResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostResourcesAllocate operation middleware
func (sh *strictHandler) PostResourcesAllocate(ctx echo.Context, params PostResourcesAllocateParams) error {
	var request PostResourcesAllocateRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesAllocate(ctx.Request().Context(), request.(PostResourcesAllocateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesAllocate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostResourcesAllocateResponseObject); ok {
		return validResponse.VisitPostResourcesAllocateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostResourcesDeallocate operation middleware
func (sh *strictHandler) PostResourcesDeallocate(ctx echo.Context) error {
	var request PostResourcesDeallocateRequestObject

	var body PostResourcesDeallocateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesDeallocate(ctx.Request().Context(), request.(PostResourcesDeallocateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesDeallocate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostResourcesDeallocateResponseObject); ok {
		return validResponse.VisitPostResourcesDeallocateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostResourcesInitialize operation middleware
func (sh *strictHandler) PostResourcesInitialize(ctx echo.Context) error {
	var request PostResourcesInitializeRequestObject

	var body PostResourcesInitializeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesInitialize(ctx.Request().Context(), request.(PostResourcesInitializeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesInitialize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostResourcesInitializeResponseObject); ok {
		return validResponse.VisitPostResourcesInitializeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostResourcesLoad operation middleware
func (sh *strictHandler) PostResourcesLoad(ctx echo.Context) error {
	var request PostResourcesLoadRequestObject

	var body PostResourcesLoadJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostResourcesLoad(ctx.Request().Context(), request.(PostResourcesLoadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostResourcesLoad")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostResourcesLoadResponseObject); ok {
		return validResponse.VisitPostResourcesLoadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksInfoCount operation middleware
func (sh *strictHandler) PostTasksInfoCount(ctx echo.Context) error {
	var request PostTasksInfoCountRequestObject

	var body PostTasksInfoCountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksInfoCount(ctx.Request().Context(), request.(PostTasksInfoCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksInfoCount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksInfoCountResponseObject); ok {
		return validResponse.VisitPostTasksInfoCountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksInfoErase operation middleware
func (sh *strictHandler) PostTasksInfoErase(ctx echo.Context) error {
	var request PostTasksInfoEraseRequestObject

	var body PostTasksInfoEraseJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksInfoErase(ctx.Request().Context(), request.(PostTasksInfoEraseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksInfoErase")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksInfoEraseResponseObject); ok {
		return validResponse.VisitPostTasksInfoEraseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksInfoInsert operation middleware
func (sh *strictHandler) PostTasksInfoInsert(ctx echo.Context) error {
	var request PostTasksInfoInsertRequestObject

	var body PostTasksInfoInsertJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksInfoInsert(ctx.Request().Context(), request.(PostTasksInfoInsertRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksInfoInsert")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksInfoInsertResponseObject); ok {
		return validResponse.VisitPostTasksInfoInsertResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksInfoLoad operation middleware
func (sh *strictHandler) PostTasksInfoLoad(ctx echo.Context) error {
	var request PostTasksInfoLoadRequestObject

	var body PostTasksInfoLoadJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksInfoLoad(ctx.Request().Context(), request.(PostTasksInfoLoadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksInfoLoad")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksInfoLoadResponseObject); ok {
		return validResponse.VisitPostTasksInfoLoadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksInfoUpdate operation middleware
func (sh *strictHandler) PostTasksInfoUpdate(ctx echo.Context) error {
	var request PostTasksInfoUpdateRequestObject

	var body PostTasksInfoUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksInfoUpdate(ctx.Request().Context(), request.(PostTasksInfoUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksInfoUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksInfoUpdateResponseObject); ok {
		return validResponse.VisitPostTasksInfoUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksLoad operation middleware
func (sh *strictHandler) PostTasksLoad(ctx echo.Context) error {
	var request PostTasksLoadRequestObject

	var body PostTasksLoadJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksLoad(ctx.Request().Context(), request.(PostTasksLoadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksLoad")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksLoadResponseObject); ok {
		return validResponse.VisitPostTasksLoadResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasksSpawn operation middleware
func (sh *strictHandler) PostTasksSpawn(ctx echo.Context) error {
	var request PostTasksSpawnRequestObject

	var body PostTasksSpawnJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasksSpawn(ctx.Request().Context(), request.(PostTasksSpawnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasksSpawn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksSpawnResponseObject); ok {
		return validResponse.VisitPostTasksSpawnResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ3W/bNhD/VwhuDxvgxd6Kvegt6wcQ7Ctosr10wXCWzjFriVR5x3pe4f99ICVLlk3Z",
	"cpOs6bKnstbx7ni/H++D+SBTU5RGo2aSyQdJ6RwLCMuX1hrrF6U1JVpWGH4ukAhu0S8zpNSqkpXRMpHn",
	"Yu4K0MIiZDDNUaBXIDbyI8mrEmUiia3St3K9HkmL75yymMnkjdyRu2nkzfQtpizXI3mhZ+a5sxRzK1PE",
	"Sqfs14qxCD/uWGxUgrWw8v/PVaF4S1Jpxlu0/lMBtKCOti8tzmQivxi3IRvX8Rq/xtTY7GegRcwMLVQZ",
	"t0LG8olGrozlanPXzLonYq9U7uVb8+3nyyqEqys3vbaI+1Fd4Coax/eQOzzm7jXQ4rJVtwu4173RFEN7",
	"K6R7fvk1VLyLeFfLrv4sgRltTGjHl1ZfZHe/czUUg8NmbIZhfdShKjiNfNwFMs6mEdRUFrVODOzoMJ6H",
	"vVKZbNQchq5y7UIrVpCrv2NB6vHyFFf6PbiO0qbHpNKlYzotcxjHp2/qenOHu1N73LrR0T3yB+2Lik8J",
	"0WSwY3I/wwJDdCO56eAUtptxYlls+6DBaGWi70BXJSz1a6TSaBp6GfbJ1K8dUzVTaZNtdrT/x6izH4Z1",
	"uCAVZ7oF/7lFYBSgM4F/YeoYha/CVk0dYyaWxi5muVl6C6w490ovMZ0vQJxfXvjbi5YqTd+eTc4mITQl",
	"aiiVTOSz8NNIlsDzcOSxrZMKjSHPTQpcgW2IOxXhIvN2DPEmCdH5Rtxrs1AgoyWZvPHoyUS+c2h9stVQ",
	"hIgXxmmW20Fj63BUt0axMr6+8dIVAYOv300m/p/UaEYd3IOyzGsSjd9SxaRW4VAaeCy6GPz6o5f6/kR7",
	"h+hTtX0RU69A5c5iIBS5ogC78l1fHVwSv4gGoSCzBViGJ0L2ot1QAYHEP5hs9S9F9VzkiliYWXMkoTLU",
	"rGbKU2eXG+s7wh+5cY8M5RaPfpBVU+wHgtx2B/cB8uHGeb8fGUSDTKV+DXYlvmqUvBDf/OEmk2cofvf9",
	"x9dPkA9tIPv5kBvIBjLhJy/6BC76SWT9LNK/R26XAuwn57HvGcZpqKUHSeDbFQqT/Vbd/RgWdDuktHkn",
	"OHTarReF9UjOmkn52J56po7M3DGObTqMB8kSbRfy+NgRIBU2zMokHCl9K0DM2uBtcwUtEA7kyssge19c",
	"eSjca71PsV3IMbQKFfDTVT/qShPaoSniohL+eNyPzU1hOP4fy26p9zEXUKO5B+DxMt/Ad8cy/9QS/KBu",
	"oWXt59MtDCoHrsyOzosNs36rhD9dQRjJ1t+hcLlyk/oGpqXuQ06TkWrL8aebp5auKiZE09XATPUIhhHv",
	"76cfRK6jf816rGkFBGETvM4kQiUs9QDgw0PyAzYX3afkyOmu5yhoW8gfByo2sBFT/xWWGrN758Nx17ff",
	"2B8jB4KHAoTGZQhYtZPQvt889jqby0TOmUtKxuMyvESfQanOKqHk2WQykeub9T8BAAD//8SMGE0THwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
